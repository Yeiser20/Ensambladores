/* The following code was generated by JFlex 1.4.3 on 9/11/21 11:44 PM */

package analisadorlexico;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 9/11/21 11:44 PM from the specification file
 * <tt>C:/Users/danie/OneDrive/Documentos/5Âª SEMESTRE FACULTAD/ENSAMBLADORES/AnalisadorLexico/src/analisadorlexico/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  5, 68,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     8,  6, 40,  6, 41,  6,  0, 38, 36, 37,  6,  6, 11, 48,  6,  0, 
    49,  4,  4,  4,  4,  4,  4,  4,  4,  4,  6, 67,  0,  0,  0,  6, 
     0, 23, 15, 32, 14, 26,  2, 27, 39, 52, 64, 35, 56, 28, 29, 33, 
    57,  7, 59, 25, 24, 62, 61, 10, 54,  7, 66,  1,  1,  1,  1,  3, 
     1, 16, 13, 30, 12, 19,  2, 20, 50, 51, 63, 34, 55, 21, 22, 31, 
    46,  2, 58, 18, 17, 45, 60,  9, 53, 47, 65, 43, 42, 44,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\2\1\1\3\1\4\1\2\1\1\1\4"+
    "\16\1\3\2\1\1\1\2\13\1\1\4\2\0\3\1"+
    "\1\0\1\5\2\1\1\6\1\1\1\0\1\7\1\10"+
    "\1\1\1\11\1\1\3\12\1\7\1\10\1\1\1\11"+
    "\1\12\14\1\1\12\1\1\1\12\3\0\1\1\1\0"+
    "\20\1\1\13\3\1\5\0\1\1\2\0\1\5\3\1"+
    "\1\13\2\1\1\13\2\1\1\13\2\1\1\0\1\14"+
    "\3\0\1\15\6\1\1\16\1\17\4\0\1\16\4\1"+
    "\1\20\3\1\1\3\1\0\1\14\1\6\2\1\1\21"+
    "\7\0\1\16\7\0\1\22\23\0\1\20\1\0\1\23"+
    "\5\0\1\24";

  private static int [] zzUnpackAction() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u051f\0\u0564\0\u05a9\0\u05ee\0\u0633"+
    "\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b"+
    "\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83"+
    "\0\u0ac8\0\212\0\u0b0d\0\u0b52\0\u0b97\0\u0bdc\0\u01e3\0\u01e3"+
    "\0\u0c21\0\u0c66\0\u0c66\0\u0cab\0\u0cf0\0\u0b52\0\u0cab\0\u0d35"+
    "\0\u0b52\0\u0d7a\0\u0b52\0\u0dbf\0\u0cab\0\u0cab\0\u0b52\0\u0e04"+
    "\0\u0cab\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7"+
    "\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u1140\0\u11ca"+
    "\0\u0fe7\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u0b52\0\u17b8"+
    "\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0"+
    "\0\u0c66\0\u1a25\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u0cab\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61"+
    "\0\105\0\u1da6\0\u1deb\0\u1e30\0\u0b52\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u1887\0\u2013\0\u2058\0\u209d\0\u20e2"+
    "\0\u2127\0\u1a25\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u0b52\0\u2280"+
    "\0\u22c5\0\u230a\0\105\0\u234f\0\u1da6\0\105\0\u2394\0\u23d9"+
    "\0\u2058\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc"+
    "\0\u241e\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7"+
    "\0\u2a0c\0\u2a51\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u01e3\0\u2d48\0\105\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\105";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\4\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\4\1\22\1\4\1\23"+
    "\1\11\1\24\1\25\1\4\1\26\1\4\1\27\1\4"+
    "\1\30\3\4\1\31\1\10\1\32\1\4\1\33\1\10"+
    "\3\2\1\11\1\34\1\4\1\35\1\6\1\4\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\4\2\11\1\47\1\50\1\4\1\11\1\51\107\0"+
    "\1\52\1\0\1\52\3\0\1\52\2\0\1\52\1\0"+
    "\3\52\1\0\1\52\7\0\2\52\4\0\1\52\5\0"+
    "\1\53\10\0\2\52\7\0\1\52\2\0\1\52\1\0"+
    "\1\52\1\0\2\52\3\0\1\52\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\57\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\3\0\1\52\1\55\1\61\1\56\2\0"+
    "\1\61\1\0\1\55\1\61\1\0\3\61\1\55\1\61"+
    "\7\55\2\61\4\55\1\61\5\55\1\53\2\0\1\55"+
    "\5\0\2\61\1\55\1\0\1\56\4\55\1\61\2\55"+
    "\1\61\1\55\1\61\1\55\2\61\3\55\1\61\4\0"+
    "\2\62\1\6\2\0\1\62\1\0\2\62\1\0\30\62"+
    "\3\0\1\63\5\0\3\62\1\0\1\6\1\63\20\62"+
    "\7\0\1\7\2\0\1\7\2\0\1\7\73\0\1\57"+
    "\3\0\40\57\1\0\1\57\1\0\1\60\3\0\4\57"+
    "\1\0\21\57\3\0\1\52\1\54\1\61\1\56\1\0"+
    "\1\57\1\64\1\57\1\54\1\64\1\57\3\64\1\54"+
    "\1\64\7\54\2\64\4\54\1\64\5\54\1\65\1\57"+
    "\1\0\1\54\1\0\1\60\3\0\2\64\1\54\1\57"+
    "\1\56\4\54\1\64\2\54\1\64\1\54\1\64\1\54"+
    "\2\64\3\54\1\64\4\0\1\57\2\0\1\7\2\57"+
    "\1\12\2\57\1\12\32\57\1\0\1\57\1\0\1\60"+
    "\3\0\4\57\1\0\21\57\3\0\1\52\1\54\1\61"+
    "\1\56\1\0\1\57\1\64\1\57\1\66\1\64\1\57"+
    "\1\64\1\67\1\64\1\54\1\70\1\54\1\71\5\54"+
    "\2\64\4\54\1\64\5\54\1\65\1\57\1\0\1\54"+
    "\1\0\1\60\3\0\1\72\1\64\1\54\1\57\1\56"+
    "\1\73\1\74\1\54\1\73\1\64\1\73\1\54\1\64"+
    "\1\54\1\64\1\54\2\64\3\54\1\64\3\0\1\52"+
    "\1\54\1\61\1\56\1\0\1\57\1\64\1\57\1\54"+
    "\1\64\1\57\3\64\1\54\1\64\7\54\2\64\4\54"+
    "\1\64\5\54\1\65\1\57\1\0\1\54\1\0\1\60"+
    "\3\0\1\64\1\75\1\54\1\57\1\56\1\73\2\54"+
    "\1\73\1\64\1\73\1\54\1\64\1\54\1\64\1\54"+
    "\2\64\3\54\1\64\3\0\1\52\1\54\1\61\1\56"+
    "\1\0\1\57\1\64\1\57\1\54\1\76\1\57\3\64"+
    "\1\77\1\64\6\54\1\100\1\64\1\101\4\54\1\64"+
    "\5\54\1\65\1\57\1\0\1\73\1\0\1\60\3\0"+
    "\2\64\1\54\1\57\1\56\2\54\1\102\1\54\1\75"+
    "\1\54\1\73\1\64\1\54\1\64\1\54\2\64\3\54"+
    "\1\64\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\57\2\54\1\57\30\54\2\57\1\0\1\73\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\4\54\1\73\1\54"+
    "\2\73\11\54\3\0\1\52\1\54\1\61\1\56\1\0"+
    "\1\57\1\64\1\57\1\54\1\64\1\57\1\103\2\64"+
    "\1\54\1\103\7\54\2\64\4\54\1\64\5\54\1\65"+
    "\1\57\1\0\1\54\1\0\1\60\3\0\2\64\1\54"+
    "\1\57\1\56\1\73\2\54\1\73\1\64\1\73\1\54"+
    "\1\64\1\54\1\64\1\54\2\64\3\54\1\64\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\57\2\54"+
    "\1\57\5\54\1\104\1\71\21\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\1\54\1\73\1\54\1\57\1\56"+
    "\1\105\1\73\17\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\57\2\54\1\57\6\54\1\71\3\54"+
    "\1\106\15\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\57\2\54\1\57\23\54\1\107"+
    "\4\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\21\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\57\2\54\1\57\2\54\1\110\10\54"+
    "\1\110\14\54\2\57\1\0\1\73\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\4\54\1\73\1\54\1\73\12\54"+
    "\3\0\1\52\1\54\1\61\1\56\1\0\1\57\1\64"+
    "\1\57\1\54\1\64\1\57\3\64\1\54\1\64\7\54"+
    "\1\111\1\101\4\54\1\64\5\54\1\65\1\57\1\0"+
    "\1\112\1\0\1\60\3\0\2\64\1\54\1\57\1\56"+
    "\2\54\1\73\1\54\1\64\2\54\1\75\1\54\1\64"+
    "\1\54\2\64\3\54\1\64\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\57\2\54\1\57\15\54\1\71"+
    "\3\54\1\113\6\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\57\2\54\1\57\25\54"+
    "\1\114\2\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\3\0\1\52\1\54\1\61"+
    "\1\56\1\0\1\57\1\64\1\57\1\115\1\64\1\57"+
    "\3\64\1\54\1\64\1\54\1\71\5\54\2\64\4\54"+
    "\1\64\1\116\4\54\1\65\1\57\1\0\1\54\1\0"+
    "\1\60\3\0\2\64\1\54\1\57\1\56\1\73\2\54"+
    "\1\73\1\64\1\117\1\54\1\64\1\54\1\64\1\54"+
    "\2\64\3\54\1\64\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\57\1\54\1\110\1\57\15\54\1\71"+
    "\7\54\1\120\2\54\2\57\1\0\1\73\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\4\54\1\73\1\54\1\121"+
    "\12\54\4\0\1\57\3\0\40\57\1\0\1\57\1\0"+
    "\1\60\3\0\3\57\1\122\1\0\21\57\4\0\1\123"+
    "\3\0\40\123\1\0\1\123\1\0\1\123\3\0\4\123"+
    "\1\0\21\123\4\0\1\124\3\0\40\124\1\0\1\124"+
    "\1\0\1\124\3\0\4\124\1\0\21\124\3\0\1\52"+
    "\1\54\1\61\1\56\1\0\1\57\1\64\1\57\1\54"+
    "\1\64\1\57\3\64\1\54\1\64\7\54\2\64\4\54"+
    "\1\64\1\125\4\54\1\65\1\57\1\0\1\54\1\0"+
    "\1\60\3\0\2\64\1\54\1\57\1\56\4\54\1\64"+
    "\2\54\1\64\1\54\1\64\1\54\2\64\3\54\1\64"+
    "\4\0\1\57\3\0\40\57\1\0\1\57\1\0\1\60"+
    "\3\0\4\57\1\126\21\57\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\57\2\54\1\57\11\54\1\127"+
    "\1\130\15\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\10\54\1\131\10\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\57\2\54\1\57"+
    "\20\54\1\132\1\133\6\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\11\54\1\134\7\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\57"+
    "\2\54\1\57\22\54\1\135\5\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\3\54\1\57\1\56\21\54\3\0"+
    "\1\52\1\54\1\61\1\56\1\0\1\57\1\64\1\57"+
    "\1\54\1\64\1\57\3\64\1\54\1\64\7\54\2\64"+
    "\4\54\1\64\1\54\1\136\3\54\1\65\1\57\1\0"+
    "\1\54\1\0\1\60\3\0\2\64\1\54\1\57\1\56"+
    "\4\54\1\64\2\54\1\64\1\54\1\64\1\54\2\64"+
    "\3\54\1\64\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\57\2\54\1\57\1\137\22\54\1\140\4\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\57\2\54\1\57\2\54\1\141\22\54\1\142"+
    "\2\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\21\54\3\0\1\52\1\54\1\61\1\56"+
    "\1\0\1\57\1\64\1\57\1\54\1\64\1\57\3\64"+
    "\1\54\1\64\7\54\2\64\4\54\1\64\2\54\1\143"+
    "\2\54\1\65\1\57\1\0\1\54\1\0\1\60\3\0"+
    "\2\64\1\54\1\57\1\56\4\54\1\64\2\54\1\64"+
    "\1\54\1\64\1\54\2\64\3\54\1\64\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\57\2\54\1\57"+
    "\7\54\1\144\20\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\3\0\1\52\1\54"+
    "\1\61\1\56\1\0\1\57\1\64\1\57\1\54\1\64"+
    "\1\57\3\64\1\54\1\64\7\54\2\64\1\145\3\54"+
    "\1\64\5\54\1\65\1\57\1\0\1\54\1\0\1\60"+
    "\3\0\2\64\1\54\1\57\1\56\4\54\1\64\2\54"+
    "\1\64\1\54\1\64\1\54\2\64\3\54\1\64\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\57\2\54"+
    "\1\57\4\54\1\146\1\54\1\147\3\54\1\137\7\54"+
    "\1\150\5\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\5\54\1\147\13\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\57\2\54\1\57"+
    "\13\54\1\151\1\54\1\147\3\54\1\141\2\54\1\152"+
    "\3\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\6\54\1\147\12\54\2\0\104\51\3\0"+
    "\1\153\1\0\1\154\1\0\40\153\1\155\1\153\1\0"+
    "\1\153\3\0\4\153\1\154\21\153\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\2\55\1\56\2\0\1\55\1\157"+
    "\2\55\1\0\30\55\3\0\1\55\5\0\3\55\1\0"+
    "\1\56\21\55\4\0\2\160\1\56\2\0\1\160\1\157"+
    "\2\160\1\0\30\160\3\0\1\160\5\0\3\160\1\0"+
    "\1\56\21\160\3\0\1\52\1\55\1\61\1\56\2\0"+
    "\1\61\1\157\1\55\1\61\1\0\3\61\1\55\1\61"+
    "\7\55\2\61\4\55\1\61\5\55\1\53\2\0\1\55"+
    "\5\0\2\61\1\55\1\0\1\56\4\55\1\61\2\55"+
    "\1\61\1\55\1\61\1\55\2\61\3\55\1\61\4\0"+
    "\2\62\1\161\2\0\1\62\1\0\2\62\1\0\30\62"+
    "\3\0\1\62\5\0\3\62\1\0\1\161\21\62\3\0"+
    "\1\52\1\54\1\61\1\56\1\0\1\57\1\64\1\156"+
    "\1\54\1\64\1\57\3\64\1\54\1\64\7\54\2\64"+
    "\4\54\1\64\5\54\1\65\1\57\1\0\1\54\1\0"+
    "\1\60\3\0\2\64\1\54\1\57\1\56\4\54\1\64"+
    "\2\54\1\64\1\54\1\64\1\54\2\64\3\54\1\64"+
    "\4\0\1\162\1\0\1\154\1\0\40\162\1\155\1\162"+
    "\1\0\1\163\3\0\4\162\1\154\21\162\3\0\1\52"+
    "\1\54\1\61\1\56\1\0\1\57\1\64\1\156\1\54"+
    "\1\64\1\57\3\64\1\54\1\64\1\164\6\54\2\64"+
    "\4\54\1\64\5\54\1\65\1\57\1\0\1\54\1\0"+
    "\1\60\3\0\2\64\1\54\1\57\1\56\4\54\1\64"+
    "\2\54\1\64\1\54\1\64\1\54\2\64\3\54\1\64"+
    "\3\0\1\52\1\54\1\61\1\56\1\0\1\57\1\64"+
    "\1\156\1\54\1\64\1\57\3\64\1\54\1\64\7\54"+
    "\2\64\4\54\1\64\5\54\1\65\1\57\1\0\1\54"+
    "\1\0\1\60\3\0\1\64\1\165\1\54\1\57\1\56"+
    "\4\54\1\64\2\54\1\64\1\54\1\64\1\54\2\64"+
    "\3\54\1\64\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\30\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\3\54\1\57\1\56\12\54\1\147"+
    "\6\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\14\54\1\166\13\54\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\30\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\13\54\1\147\5\54\3\0"+
    "\1\52\1\54\1\61\1\56\1\0\1\57\1\64\1\156"+
    "\1\54\1\64\1\57\1\167\2\64\1\54\1\64\7\54"+
    "\2\64\4\54\1\64\5\54\1\65\1\57\1\0\1\54"+
    "\1\0\1\60\3\0\2\64\1\54\1\57\1\56\4\54"+
    "\1\64\2\54\1\64\1\54\1\64\1\54\2\64\3\54"+
    "\1\64\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\1\147\3\54\1\170\23\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\21\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\30\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\5\54\1\147\13\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\1\171\27\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\21\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\156\2\54\1\57"+
    "\30\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\12\54\1\172\6\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\2\54"+
    "\1\147\25\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\3\0\1\52\1\54\1\61"+
    "\1\56\1\0\1\57\1\64\1\156\1\54\1\64\1\57"+
    "\2\64\1\167\1\54\1\64\6\54\1\173\2\64\4\54"+
    "\1\64\5\54\1\65\1\57\1\0\1\54\1\0\1\60"+
    "\3\0\2\64\1\54\1\57\1\56\4\54\1\64\2\54"+
    "\1\64\1\54\1\64\1\54\2\64\3\54\1\64\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\156\2\54"+
    "\1\57\30\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\6\54\1\147\12\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\156\2\54\1\57"+
    "\2\54\1\174\25\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\13\54\1\175\5\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\1\147\27\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\1\176\27\54\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\2\54\1\177\25\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\3\54\1\57\1\56\21\54\4\0"+
    "\1\57\1\0\1\200\1\0\40\57\1\0\1\57\1\0"+
    "\1\60\3\0\4\57\1\200\21\57\4\0\1\123\3\0"+
    "\40\123\1\201\1\123\1\0\1\123\3\0\4\123\1\0"+
    "\21\123\4\0\1\124\3\0\40\124\1\0\1\124\1\202"+
    "\1\203\3\0\4\124\1\0\21\124\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\1\54\1\147"+
    "\1\54\1\57\1\56\21\54\6\0\1\204\54\0\1\204"+
    "\25\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\30\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\1\105\2\54\1\57\1\56\21\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\156\2\54\1\57"+
    "\5\54\1\205\22\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\7\54"+
    "\1\144\20\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\30\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\14\54\1\112\4\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\14\54\1\205\13\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\16\54\1\145\11\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\21\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\30\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\1\206\20\54\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\156\2\54"+
    "\1\57\30\54\2\57\1\0\1\207\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\6\54\1\147"+
    "\21\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\21\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\23\54\1\210\4\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\15\54\1\147\12\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\21\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\25\54\1\211\2\54\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\30\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\7\54\1\147\11\54\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\156\2\54"+
    "\1\57\5\54\1\147\22\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\21\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\156\2\54\1\57"+
    "\14\54\1\147\13\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\7\54"+
    "\1\147\20\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\30\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\3\54\1\212\15\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\16\54\1\147\11\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\30\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\3\54\1\57\1\56\4\54\1\213"+
    "\14\54\4\0\1\153\3\0\37\153\1\214\1\0\1\153"+
    "\1\0\1\153\3\0\4\153\1\0\21\153\6\0\1\154"+
    "\40\0\1\215\1\0\1\216\11\0\1\154\25\0\1\217"+
    "\3\0\40\217\1\0\1\217\1\0\1\217\3\0\4\217"+
    "\1\0\21\217\4\0\1\57\3\0\3\57\7\220\26\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\13\0\7\221\67\0\3\160\2\0\1\160\1\0\2\160"+
    "\1\0\30\160\3\0\1\160\5\0\3\160\1\0\22\160"+
    "\4\0\1\162\3\0\37\162\1\222\1\0\1\162\1\0"+
    "\1\163\3\0\4\162\1\0\21\162\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\4\54"+
    "\1\223\23\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\3\0\1\52\1\54\1\61"+
    "\1\56\1\0\1\57\1\64\1\156\1\54\1\64\1\57"+
    "\3\64\1\54\1\64\7\54\2\64\4\54\1\64\5\54"+
    "\1\65\1\57\1\0\1\54\1\0\1\60\3\0\2\64"+
    "\1\224\1\57\1\56\4\54\1\64\2\54\1\64\1\54"+
    "\1\64\1\54\2\64\3\54\1\64\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\13\54"+
    "\1\225\14\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\22\54\1\226"+
    "\5\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\21\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\6\54\1\227\21\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\1\54\1\227"+
    "\1\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\2\54\1\57\6\54\1\230"+
    "\21\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\21\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\24\54\1\231\3\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\15\54\1\227\12\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\7\54\1\227\11\54\4\0\1\54\1\55\1\56\1\0"+
    "\1\57\1\54\1\156\2\54\1\57\15\54\1\232\12\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\7\54\1\223\20\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\21\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\16\54\1\225\11\54\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\6\0\1\200\40\0\1\233\13\0\1\200\70\0\1\234"+
    "\41\0\1\124\3\0\40\124\1\0\1\124\1\235\1\203"+
    "\3\0\4\124\1\0\21\124\6\0\1\204\42\0\1\236"+
    "\11\0\1\204\25\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\10\54\1\147\17\54\2\57"+
    "\1\0\1\54\1\0\1\60\3\0\3\54\1\57\1\56"+
    "\21\54\4\0\1\54\1\55\1\56\1\0\1\57\1\54"+
    "\1\156\2\54\1\57\17\54\1\147\10\54\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\30\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\1\54\1\237\1\54\1\57\1\56\21\54\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\156\2\54"+
    "\1\57\30\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\7\54\1\240\11\54\4\0\1\54"+
    "\1\55\1\56\1\0\1\57\1\54\1\156\2\54\1\57"+
    "\30\54\2\57\1\0\1\54\1\0\1\60\3\0\3\54"+
    "\1\57\1\56\17\54\1\147\1\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\20\54\1\147\47\0\1\215\104\0\1\241\41\0"+
    "\1\217\3\0\40\217\1\242\1\217\1\0\1\217\3\0"+
    "\4\217\1\0\21\217\4\0\1\57\3\0\2\57\1\243"+
    "\7\220\26\57\1\0\1\57\1\0\1\60\3\0\4\57"+
    "\1\0\21\57\12\0\1\244\7\221\67\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\245\2\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\30\54\1\246\1\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\247"+
    "\2\54\1\57\30\54\2\57\1\0\1\54\1\0\1\60"+
    "\3\0\3\54\1\57\1\56\21\54\4\0\1\54\1\55"+
    "\1\56\1\0\1\57\1\54\1\156\2\54\1\57\26\54"+
    "\1\223\1\54\2\57\1\0\1\54\1\0\1\60\3\0"+
    "\3\54\1\57\1\56\21\54\4\0\1\54\1\55\1\56"+
    "\1\0\1\57\1\54\1\156\1\147\1\54\1\57\30\54"+
    "\2\57\1\0\1\54\1\0\1\60\3\0\3\54\1\57"+
    "\1\56\21\54\4\0\1\54\1\55\1\56\1\0\1\57"+
    "\1\54\1\156\2\54\1\57\27\54\1\225\2\57\1\0"+
    "\1\54\1\0\1\60\3\0\3\54\1\57\1\56\21\54"+
    "\4\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\1\54\1\147\1\57\30\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\21\54\12\0\1\250"+
    "\76\0\1\54\1\55\1\56\1\0\1\57\1\54\1\156"+
    "\2\54\1\57\12\54\1\146\15\54\2\57\1\0\1\54"+
    "\1\0\1\60\3\0\3\54\1\57\1\56\21\54\4\0"+
    "\1\54\1\55\1\56\1\0\1\57\1\54\1\156\2\54"+
    "\1\57\21\54\1\151\6\54\2\57\1\0\1\54\1\0"+
    "\1\60\3\0\3\54\1\57\1\56\21\54\47\0\1\251"+
    "\41\0\1\57\3\0\40\57\1\0\1\57\1\0\1\60"+
    "\1\0\1\252\1\0\4\57\1\0\21\57\55\0\1\252"+
    "\33\0\1\57\3\0\3\57\7\220\2\57\1\253\23\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\4\0\1\57\1\0\1\254\1\0\40\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\254\21\57\4\0\1\57"+
    "\3\0\3\57\7\220\11\57\1\255\14\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\54\0\1\256"+
    "\72\0\1\257\46\0\1\57\3\0\15\57\1\260\22\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\6\0\1\254\40\0\1\261\13\0\1\254\25\0\1\57"+
    "\3\0\24\57\1\262\13\57\1\0\1\57\1\0\1\60"+
    "\3\0\4\57\1\0\21\57\12\0\1\263\114\0\1\264"+
    "\66\0\1\57\3\0\16\57\1\265\21\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\47\0\1\261"+
    "\41\0\1\57\3\0\25\57\1\266\12\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\46\0\1\267"+
    "\54\0\1\270\72\0\1\57\3\0\17\57\1\271\20\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\4\0\1\57\3\0\26\57\1\272\11\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\50\0\1\273"+
    "\61\0\1\274\63\0\1\57\3\0\15\57\1\275\22\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\4\0\1\57\3\0\24\57\1\276\13\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\55\0\1\277"+
    "\57\0\1\300\60\0\1\57\3\0\20\57\1\301\17\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\4\0\1\57\3\0\27\57\1\302\10\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\42\0\1\303"+
    "\64\0\1\304\66\0\1\57\3\0\13\57\1\305\24\57"+
    "\1\0\1\57\1\0\1\60\3\0\4\57\1\0\21\57"+
    "\4\0\1\57\3\0\22\57\1\305\15\57\1\0\1\57"+
    "\1\0\1\60\3\0\4\57\1\0\21\57\22\0\1\306"+
    "\140\0\1\307\44\0\1\310\113\0\1\311\107\0\1\312"+
    "\76\0\1\313\140\0\1\314\76\0\1\315\36\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12006];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\47\1\2\0\3\1\1\0\5\1\1\0"+
    "\34\1\3\0\1\1\1\0\24\1\5\0\1\1\2\0"+
    "\15\1\1\0\1\11\3\0\11\1\4\0\11\1\1\11"+
    "\1\0\1\1\1\11\3\1\7\0\1\1\7\0\1\1"+
    "\23\0\1\1\1\0\1\11\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[205];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 21: break;
        case 13: 
          { return new Symbol(sym.Interrupcion, yychar, yyline, yytext());
          }
        case 22: break;
        case 6: 
          { return new Symbol(sym.Constante_Numerica_H, yychar, yyline, yytext());
          }
        case 23: break;
        case 20: 
          { return new Symbol(sym.Constante_Caracter_CS, yychar, yyline, yytext());
          }
        case 24: break;
        case 12: 
          { return new Symbol(sym.Constante_Caracter_CD, yychar, yyline, yytext());
          }
        case 25: break;
        case 18: 
          { return new Symbol(sym.PseudoinstruccionInc, yychar, yyline, yytext());
          }
        case 26: break;
        case 10: 
          { return new Symbol(sym.Registro, yychar, yyline, yytext());
          }
        case 27: break;
        case 1: 
          { return new Symbol(sym.Simbolo, yychar, yyline, yytext());
          }
        case 28: break;
        case 8: 
          { return new Symbol(sym.Pseudoinstruccion_D_B, yychar, yyline, yytext());
          }
        case 29: break;
        case 17: 
          { return new Symbol(sym.Pseudoinstruccion_Dup_H, yychar, yyline, yytext());
          }
        case 30: break;
        case 19: 
          { return new Symbol(sym.Correcta, yychar, yyline, yytext());
          }
        case 31: break;
        case 5: 
          { return new Symbol(sym.ConstanteCadInc, yychar, yyline, yytext());
          }
        case 32: break;
        case 7: 
          { return new Symbol(sym.Pseudoinstruccion_D_W, yychar, yyline, yytext());
          }
        case 33: break;
        case 14: 
          { return new Symbol(sym.Pseudoinstruccion_Dup_Caracter, yychar, yyline, yytext());
          }
        case 34: break;
        case 16: 
          { return new Symbol(sym.Pseudoinstruccion, yychar, yyline, yytext());
          }
        case 35: break;
        case 3: 
          { return new Symbol(sym.Constante_Numerica_D, yychar, yyline, yytext());
          }
        case 36: break;
        case 11: 
          { return new Symbol(sym.Instruccion, yychar, yyline, yytext());
          }
        case 37: break;
        case 4: 
          { /*ignore*/
          }
        case 38: break;
        case 15: 
          { return new Symbol(sym.Pseudoinstruccion_Dup_0, yychar, yyline, yytext());
          }
        case 39: break;
        case 9: 
          { return new Symbol(sym.Sregistro, yychar, yyline, yytext());
          }
        case 40: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
