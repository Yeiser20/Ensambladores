
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Nov 29 14:19:31 CST 2021
//----------------------------------------------------

package Proyecto;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Nov 29 14:19:31 CST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\324\000\002\002\004\000\002\002\005\000\002\003" +
    "\007\000\002\004\011\000\002\004\011\000\002\004\011" +
    "\000\002\004\010\000\002\012\007\000\002\005\004\000" +
    "\002\005\003\000\002\006\006\000\002\006\006\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\011\007\000\002" +
    "\011\007\000\002\013\004\000\002\013\003\000\002\014" +
    "\004\000\002\014\004\000\002\014\004\000\002\014\004" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\027\007\000\002\027\011\000\002\027" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\007\000\002\024\005\000" +
    "\002\024\005\000\002\026\011\000\002\026\007\000\002" +
    "\026\007\000\002\026\011\000\002\026\007\000\002\026" +
    "\007\000\002\026\011\000\002\026\011\000\002\026\007" +
    "\000\002\026\007\000\002\026\007\000\002\026\011\000" +
    "\002\026\007\000\002\026\007\000\002\026\005\000\002" +
    "\030\011\000\002\030\007\000\002\030\007\000\002\030" +
    "\011\000\002\030\007\000\002\030\007\000\002\030\011" +
    "\000\002\030\012\000\002\030\012\000\002\030\011\000" +
    "\002\030\007\000\002\030\007\000\002\030\007\000\002" +
    "\030\011\000\002\030\007\000\002\030\012\000\002\030" +
    "\007\000\002\030\007\000\002\030\007\000\002\030\005" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\007\000\002" +
    "\023\007\000\002\023\007\000\002\023\007\000\002\023" +
    "\003\000\002\015\004\000\002\015\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\004\000\002\016\003\000\002\016\003\000" +
    "\002\017\004\000\002\017\004\000\002\017\004\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\020\006\000\002\020" +
    "\006\000\002\020\006\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\006\000\002\020\006\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\006\000\002\020\006\000\002\020\006\000\002\020" +
    "\006\000\002\020\005\000\002\020\005\000\002\020\011" +
    "\000\002\020\007\000\002\020\007\000\002\020\011\000" +
    "\002\020\004\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\005\000\002\020" +
    "\006\000\002\020\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\004\052\004\001\002\000\004\076\u0120\001" +
    "\002\000\004\002\u011f\001\002\000\004\053\007\001\002" +
    "\000\004\076\377\001\002\000\004\054\012\001\002\000" +
    "\004\002\000\001\002\000\004\076\013\001\002\000\042" +
    "\003\033\004\031\005\016\006\025\007\021\010\023\011" +
    "\022\012\030\013\024\014\014\015\042\016\032\017\035" +
    "\070\034\077\026\100\027\001\002\000\006\003\374\070" +
    "\373\001\002\000\044\003\uffd6\004\uffd6\005\uffd6\006\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015" +
    "\uffd6\016\uffd6\017\uffd6\055\uffd6\070\uffd6\077\uffd6\100\uffd6" +
    "\001\002\000\004\076\372\001\002\000\044\003\uffda\004" +
    "\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda\055\uffda\070" +
    "\uffda\077\uffda\100\uffda\001\002\000\044\003\uffd7\004\uffd7" +
    "\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013" +
    "\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\055\uffd7\070\uffd7" +
    "\077\uffd7\100\uffd7\001\002\000\004\076\371\001\002\000" +
    "\066\003\355\020\075\021\114\022\106\023\115\024\070" +
    "\025\066\026\067\027\077\030\074\031\076\032\116\033" +
    "\111\034\117\035\113\036\112\037\121\040\104\041\072" +
    "\042\101\043\120\050\352\070\356\073\130\074\124\075" +
    "\126\001\002\000\024\003\337\020\075\023\115\026\067" +
    "\031\076\034\117\035\113\036\112\037\121\001\002\000" +
    "\050\003\266\020\075\021\114\022\106\023\115\024\070" +
    "\025\066\026\067\027\077\030\074\031\076\032\116\033" +
    "\111\034\117\035\113\036\112\037\121\050\264\070\267" +
    "\001\002\000\004\076\262\001\002\000\004\076\261\001" +
    "\002\000\024\010\023\011\022\012\030\013\024\014\014" +
    "\015\042\016\032\017\035\076\257\001\002\000\064\003" +
    "\107\020\075\021\114\022\106\023\115\024\070\025\066" +
    "\026\067\027\077\030\074\031\076\032\116\033\111\034" +
    "\117\035\113\036\112\037\121\040\104\041\072\042\101" +
    "\043\120\050\073\061\103\062\105\070\110\001\002\000" +
    "\004\076\065\001\002\000\006\003\061\070\062\001\002" +
    "\000\004\076\060\001\002\000\004\076\057\001\002\000" +
    "\006\003\054\070\053\001\002\000\044\003\033\004\031" +
    "\005\016\006\025\007\021\010\023\011\022\012\030\013" +
    "\024\014\014\015\042\016\032\017\035\055\050\070\034" +
    "\077\026\100\027\001\002\000\044\003\uffe6\004\uffe6\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\055\uffe6\070\uffe6\077" +
    "\uffe6\100\uffe6\001\002\000\044\003\uffdb\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\055\uffdb\070\uffdb\077\uffdb" +
    "\100\uffdb\001\002\000\044\003\uffd8\004\uffd8\005\uffd8\006" +
    "\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8" +
    "\015\uffd8\016\uffd8\017\uffd8\055\uffd8\070\uffd8\077\uffd8\100" +
    "\uffd8\001\002\000\006\003\045\070\044\001\002\000\044" +
    "\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\055\uffd9\070\uffd9\077\uffd9\100\uffd9\001\002\000\004\076" +
    "\047\001\002\000\004\076\046\001\002\000\044\003\uffd0" +
    "\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\055\uffd0" +
    "\070\uffd0\077\uffd0\100\uffd0\001\002\000\044\003\uffd4\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\055\uffd4\070" +
    "\uffd4\077\uffd4\100\uffd4\001\002\000\004\076\052\001\002" +
    "\000\044\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\055\uffe7\070\uffe7\077\uffe7\100\uffe7\001\002\000" +
    "\004\002\ufffa\001\002\000\004\076\056\001\002\000\004" +
    "\076\055\001\002\000\044\003\uffce\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce\014\uffce" +
    "\015\uffce\016\uffce\017\uffce\055\uffce\070\uffce\077\uffce\100" +
    "\uffce\001\002\000\044\003\uffd2\004\uffd2\005\uffd2\006\uffd2" +
    "\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015" +
    "\uffd2\016\uffd2\017\uffd2\055\uffd2\070\uffd2\077\uffd2\100\uffd2" +
    "\001\002\000\044\003\uff5a\004\uff5a\005\uff5a\006\uff5a\007" +
    "\uff5a\010\uff5a\011\uff5a\012\uff5a\013\uff5a\014\uff5a\015\uff5a" +
    "\016\uff5a\017\uff5a\055\uff5a\070\uff5a\077\uff5a\100\uff5a\001" +
    "\002\000\044\003\uff5b\004\uff5b\005\uff5b\006\uff5b\007\uff5b" +
    "\010\uff5b\011\uff5b\012\uff5b\013\uff5b\014\uff5b\015\uff5b\016" +
    "\uff5b\017\uff5b\055\uff5b\070\uff5b\077\uff5b\100\uff5b\001\002" +
    "\000\004\076\064\001\002\000\004\076\063\001\002\000" +
    "\044\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\055\uffd3\070\uffd3\077\uffd3\100\uffd3\001\002\000\044" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\055\uffcf\070\uffcf\077\uffcf\100\uffcf\001\002\000\044\003" +
    "\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\055" +
    "\uffe5\070\uffe5\077\uffe5\100\uffe5\001\002\000\014\044\uff8f" +
    "\056\uff8f\057\uff8f\060\uff8f\076\uff8f\001\002\000\014\044" +
    "\uff9f\056\uff9f\057\uff9f\060\uff9f\076\uff9f\001\002\000\014" +
    "\044\uff93\056\uff93\057\uff93\060\uff93\076\uff93\001\002\000" +
    "\004\044\231\001\002\000\014\044\uff98\056\uff98\057\uff98" +
    "\060\uff98\076\uff98\001\002\000\020\023\143\034\141\035" +
    "\142\037\136\073\130\074\124\075\126\001\002\000\014" +
    "\044\uff8e\056\uff8e\057\uff8e\060\uff8e\076\uff8e\001\002\000" +
    "\014\044\uffa0\056\uffa0\057\uffa0\060\uffa0\076\uffa0\001\002" +
    "\000\014\044\uff9e\056\uff9e\057\uff9e\060\uff9e\076\uff9e\001" +
    "\002\000\014\044\uff92\056\uff92\057\uff92\060\uff92\076\uff92" +
    "\001\002\000\004\044\205\001\002\000\014\044\uff96\056" +
    "\uff96\057\uff96\060\uff96\076\uff96\001\002\000\004\044\202" +
    "\001\002\000\004\050\174\001\002\000\014\044\uff97\056" +
    "\uff97\057\uff97\060\uff97\076\uff97\001\002\000\004\050\135" +
    "\001\002\000\014\044\uff90\056\uff90\057\uff90\060\uff90\076" +
    "\uff90\001\002\000\004\076\134\001\002\000\004\044\122" +
    "\001\002\000\014\044\uff8d\056\uff8d\057\uff8d\060\uff8d\076" +
    "\uff8d\001\002\000\014\044\uff9c\056\uff9c\057\uff9c\060\uff9c" +
    "\076\uff9c\001\002\000\014\044\uff99\056\uff99\057\uff99\060" +
    "\uff99\076\uff99\001\002\000\014\044\uff94\056\uff94\057\uff94" +
    "\060\uff94\076\uff94\001\002\000\014\044\uff9d\056\uff9d\057" +
    "\uff9d\060\uff9d\076\uff9d\001\002\000\014\044\uff91\056\uff91" +
    "\057\uff91\060\uff91\076\uff91\001\002\000\014\044\uff9a\056" +
    "\uff9a\057\uff9a\060\uff9a\076\uff9a\001\002\000\014\044\uff95" +
    "\056\uff95\057\uff95\060\uff95\076\uff95\001\002\000\014\044" +
    "\uff9b\056\uff9b\057\uff9b\060\uff9b\076\uff9b\001\002\000\050" +
    "\020\075\021\114\022\106\023\115\024\070\025\066\026" +
    "\067\027\077\030\074\031\076\032\116\033\111\034\117" +
    "\035\113\036\112\037\121\073\130\074\124\075\126\001" +
    "\002\000\004\076\133\001\002\000\006\051\uffeb\076\uffeb" +
    "\001\002\000\004\076\132\001\002\000\006\051\uffec\076" +
    "\uffec\001\002\000\004\076\131\001\002\000\006\051\uffea" +
    "\076\uffea\001\002\000\044\003\uffa8\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\055\uffa8\070\uffa8\077\uffa8\100" +
    "\uffa8\001\002\000\044\003\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\015" +
    "\uffaf\016\uffaf\017\uffaf\055\uffaf\070\uffaf\077\uffaf\100\uffaf" +
    "\001\002\000\044\003\uffb0\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0" +
    "\016\uffb0\017\uffb0\055\uffb0\070\uffb0\077\uffb0\100\uffb0\001" +
    "\002\000\044\003\uffa1\004\uffa1\005\uffa1\006\uffa1\007\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016" +
    "\uffa1\017\uffa1\055\uffa1\070\uffa1\077\uffa1\100\uffa1\001\002" +
    "\000\020\023\143\034\141\035\142\037\136\073\130\074" +
    "\124\075\126\001\002\000\004\101\164\001\002\000\004" +
    "\051\uff7d\001\002\000\004\051\160\001\002\000\006\051" +
    "\uff8b\101\156\001\002\000\006\051\uff8a\101\154\001\002" +
    "\000\006\051\uff8c\101\144\001\002\000\014\034\145\035" +
    "\147\073\130\074\124\075\126\001\002\000\006\051\uff85" +
    "\101\152\001\002\000\004\051\uff89\001\002\000\006\051" +
    "\uff84\101\150\001\002\000\010\073\130\074\124\075\126" +
    "\001\002\000\004\051\uff80\001\002\000\010\073\130\074" +
    "\124\075\126\001\002\000\004\051\uff81\001\002\000\010" +
    "\073\130\074\124\075\126\001\002\000\004\051\uff86\001" +
    "\002\000\010\073\130\074\124\075\126\001\002\000\004" +
    "\051\uff88\001\002\000\004\044\161\001\002\000\022\020" +
    "\075\023\115\026\067\031\076\034\117\035\113\036\112" +
    "\037\121\001\002\000\004\076\163\001\002\000\044\003" +
    "\uffad\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad\011\uffad" +
    "\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\017\uffad\055" +
    "\uffad\070\uffad\077\uffad\100\uffad\001\002\000\014\034\165" +
    "\035\167\073\130\074\124\075\126\001\002\000\006\051" +
    "\uff83\101\172\001\002\000\004\051\uff87\001\002\000\006" +
    "\051\uff82\101\170\001\002\000\010\073\130\074\124\075" +
    "\126\001\002\000\004\051\uff7e\001\002\000\010\073\130" +
    "\074\124\075\126\001\002\000\004\051\uff7f\001\002\000" +
    "\020\023\143\034\141\035\142\037\136\073\130\074\124" +
    "\075\126\001\002\000\004\051\176\001\002\000\004\044" +
    "\177\001\002\000\022\021\114\022\106\024\070\025\066" +
    "\027\077\030\074\032\116\033\111\001\002\000\004\076" +
    "\201\001\002\000\044\003\uffac\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac\014\uffac\015" +
    "\uffac\016\uffac\017\uffac\055\uffac\070\uffac\077\uffac\100\uffac" +
    "\001\002\000\022\020\075\023\115\026\067\031\076\034" +
    "\117\035\113\036\112\037\121\001\002\000\004\076\204" +
    "\001\002\000\044\003\uffa2\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\055\uffa2\070\uffa2\077\uffa2\100\uffa2\001" +
    "\002\000\034\021\114\022\106\024\070\025\066\027\077" +
    "\030\074\032\116\033\111\050\211\070\210\073\130\074" +
    "\124\075\126\001\002\000\004\076\217\001\002\000\004" +
    "\076\216\001\002\000\004\076\215\001\002\000\020\023" +
    "\143\034\141\035\142\037\136\073\130\074\124\075\126" +
    "\001\002\000\004\051\213\001\002\000\004\076\214\001" +
    "\002\000\044\003\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016" +
    "\uffb1\017\uffb1\055\uffb1\070\uffb1\077\uffb1\100\uffb1\001\002" +
    "\000\044\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\055\uffb2\070\uffb2\077\uffb2\100\uffb2\001\002\000" +
    "\044\003\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9" +
    "\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\017" +
    "\uffa9\055\uffa9\070\uffa9\077\uffa9\100\uffa9\001\002\000\044" +
    "\003\uffa4\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\055\uffa4\070\uffa4\077\uffa4\100\uffa4\001\002\000\004\051" +
    "\221\001\002\000\004\044\222\001\002\000\050\020\075" +
    "\021\114\022\106\023\115\024\070\025\066\026\067\027" +
    "\077\030\074\031\076\032\116\033\111\034\117\035\113" +
    "\036\112\037\121\073\130\074\124\075\126\001\002\000" +
    "\004\076\230\001\002\000\004\076\227\001\002\000\004" +
    "\076\226\001\002\000\044\003\uffa7\004\uffa7\005\uffa7\006" +
    "\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\055\uffa7\070\uffa7\077\uffa7\100" +
    "\uffa7\001\002\000\044\003\uffab\004\uffab\005\uffab\006\uffab" +
    "\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015" +
    "\uffab\016\uffab\017\uffab\055\uffab\070\uffab\077\uffab\100\uffab" +
    "\001\002\000\044\003\uffae\004\uffae\005\uffae\006\uffae\007" +
    "\uffae\010\uffae\011\uffae\012\uffae\013\uffae\014\uffae\015\uffae" +
    "\016\uffae\017\uffae\055\uffae\070\uffae\077\uffae\100\uffae\001" +
    "\002\000\046\020\075\023\115\026\067\031\076\034\117" +
    "\035\113\036\112\037\121\040\104\041\072\042\101\043" +
    "\120\050\233\062\235\070\236\073\130\074\124\075\126" +
    "\001\002\000\004\076\252\001\002\000\020\023\143\034" +
    "\141\035\142\037\136\073\130\074\124\075\126\001\002" +
    "\000\004\076\246\001\002\000\004\050\242\001\002\000" +
    "\004\076\241\001\002\000\004\076\240\001\002\000\044" +
    "\003\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6" +
    "\055\uffa6\070\uffa6\077\uffa6\100\uffa6\001\002\000\044\003" +
    "\uffb3\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\055" +
    "\uffb3\070\uffb3\077\uffb3\100\uffb3\001\002\000\020\023\143" +
    "\034\141\035\142\037\136\073\130\074\124\075\126\001" +
    "\002\000\004\051\244\001\002\000\004\076\245\001\002" +
    "\000\044\003\uffa5\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\017\uffa5\055\uffa5\070\uffa5\077\uffa5\100\uffa5\001\002\000" +
    "\044\003\uffa3\004\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3" +
    "\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\055\uffa3\070\uffa3\077\uffa3\100\uffa3\001\002\000\004" +
    "\051\250\001\002\000\004\076\251\001\002\000\044\003" +
    "\uffb4\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\055" +
    "\uffb4\070\uffb4\077\uffb4\100\uffb4\001\002\000\044\003\uffaa" +
    "\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\055\uffaa" +
    "\070\uffaa\077\uffaa\100\uffaa\001\002\000\044\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\055\uffe2\070" +
    "\uffe2\077\uffe2\100\uffe2\001\002\000\044\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\055\uffde\070\uffde" +
    "\077\uffde\100\uffde\001\002\000\044\003\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\017\uffe1\055\uffe1\070\uffe1\077" +
    "\uffe1\100\uffe1\001\002\000\044\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\055\uffe0\070\uffe0\077\uffe0" +
    "\100\uffe0\001\002\000\044\003\uffe3\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\017\uffe3\055\uffe3\070\uffe3\077\uffe3\100" +
    "\uffe3\001\002\000\044\003\uffdf\004\uffdf\005\uffdf\006\uffdf" +
    "\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\055\uffdf\070\uffdf\077\uffdf\100\uffdf" +
    "\001\002\000\044\003\uff5c\004\uff5c\005\uff5c\006\uff5c\007" +
    "\uff5c\010\uff5c\011\uff5c\012\uff5c\013\uff5c\014\uff5c\015\uff5c" +
    "\016\uff5c\017\uff5c\055\uff5c\070\uff5c\077\uff5c\100\uff5c\001" +
    "\002\000\044\003\uffdc\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\055\uffdc\070\uffdc\077\uffdc\100\uffdc\001\002" +
    "\000\004\044\324\001\002\000\020\023\143\034\141\035" +
    "\142\037\136\073\130\074\124\075\126\001\002\000\004" +
    "\044\300\001\002\000\004\076\277\001\002\000\004\044" +
    "\270\001\002\000\050\020\075\021\114\022\106\023\115" +
    "\024\070\025\066\026\067\027\077\030\074\031\076\032" +
    "\116\033\111\034\117\035\113\036\112\037\121\073\130" +
    "\074\124\075\126\001\002\000\004\076\276\001\002\000" +
    "\004\076\275\001\002\000\004\076\274\001\002\000\044" +
    "\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011" +
    "\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9" +
    "\055\uffb9\070\uffb9\077\uffb9\100\uffb9\001\002\000\044\003" +
    "\uffbe\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\055" +
    "\uffbe\070\uffbe\077\uffbe\100\uffbe\001\002\000\044\003\uffbf" +
    "\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012" +
    "\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\055\uffbf" +
    "\070\uffbf\077\uffbf\100\uffbf\001\002\000\044\003\uffb5\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\055\uffb5\070" +
    "\uffb5\077\uffb5\100\uffb5\001\002\000\034\021\114\022\106" +
    "\024\070\025\066\027\077\030\074\032\116\033\111\050" +
    "\304\070\303\073\130\074\124\075\126\001\002\000\004" +
    "\076\312\001\002\000\004\076\311\001\002\000\004\076" +
    "\310\001\002\000\020\023\143\034\141\035\142\037\136" +
    "\073\130\074\124\075\126\001\002\000\004\051\306\001" +
    "\002\000\004\076\307\001\002\000\044\003\uffc0\004\uffc0" +
    "\005\uffc0\006\uffc0\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\055\uffc0\070\uffc0" +
    "\077\uffc0\100\uffc0\001\002\000\044\003\uffc1\004\uffc1\005" +
    "\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\055\uffc1\070\uffc1\077" +
    "\uffc1\100\uffc1\001\002\000\044\003\uffba\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\055\uffba\070\uffba\077\uffba" +
    "\100\uffba\001\002\000\044\003\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\055\uffb6\070\uffb6\077\uffb6\100" +
    "\uffb6\001\002\000\004\051\314\001\002\000\004\044\315" +
    "\001\002\000\050\020\075\021\114\022\106\023\115\024" +
    "\070\025\066\026\067\027\077\030\074\031\076\032\116" +
    "\033\111\034\117\035\113\036\112\037\121\073\130\074" +
    "\124\075\126\001\002\000\004\076\323\001\002\000\004" +
    "\076\322\001\002\000\004\076\321\001\002\000\044\003" +
    "\uffb8\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8" +
    "\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\055" +
    "\uffb8\070\uffb8\077\uffb8\100\uffb8\001\002\000\044\003\uffbc" +
    "\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\055\uffbc" +
    "\070\uffbc\077\uffbc\100\uffbc\001\002\000\044\003\uffbd\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\055\uffbd\070" +
    "\uffbd\077\uffbd\100\uffbd\001\002\000\034\020\075\023\115" +
    "\026\067\031\076\034\117\035\113\036\112\037\121\050" +
    "\327\070\326\073\130\074\124\075\126\001\002\000\004" +
    "\076\336\001\002\000\004\076\335\001\002\000\020\023" +
    "\143\034\141\035\142\037\136\073\130\074\124\075\126" +
    "\001\002\000\004\076\331\001\002\000\044\003\uffbb\004" +
    "\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\055\uffbb\070" +
    "\uffbb\077\uffbb\100\uffbb\001\002\000\004\051\333\001\002" +
    "\000\004\076\334\001\002\000\044\003\uffc3\004\uffc3\005" +
    "\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\014\uffc3\015\uffc3\016\uffc3\017\uffc3\055\uffc3\070\uffc3\077" +
    "\uffc3\100\uffc3\001\002\000\044\003\uffc2\004\uffc2\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\055\uffc2\070\uffc2\077\uffc2" +
    "\100\uffc2\001\002\000\044\003\uffb7\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\015\uffb7\016\uffb7\017\uffb7\055\uffb7\070\uffb7\077\uffb7\100" +
    "\uffb7\001\002\000\004\076\350\001\002\000\004\044\341" +
    "\001\002\000\006\050\343\070\342\001\002\000\004\076" +
    "\347\001\002\000\020\023\143\034\141\035\142\037\136" +
    "\073\130\074\124\075\126\001\002\000\004\051\345\001" +
    "\002\000\004\076\346\001\002\000\044\003\uffcc\004\uffcc" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\055\uffcc\070\uffcc" +
    "\077\uffcc\100\uffcc\001\002\000\044\003\uffcd\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\016\uffcd\017\uffcd\055\uffcd\070\uffcd\077" +
    "\uffcd\100\uffcd\001\002\000\044\003\uffcb\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\055\uffcb\070\uffcb\077\uffcb" +
    "\100\uffcb\001\002\000\004\076\370\001\002\000\020\023" +
    "\143\034\141\035\142\037\136\073\130\074\124\075\126" +
    "\001\002\000\004\076\364\001\002\000\004\076\363\001" +
    "\002\000\004\076\362\001\002\000\004\076\361\001\002" +
    "\000\004\076\360\001\002\000\044\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\055\uffc7\070\uffc7\077" +
    "\uffc7\100\uffc7\001\002\000\044\003\uffc8\004\uffc8\005\uffc8" +
    "\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\055\uffc8\070\uffc8\077\uffc8" +
    "\100\uffc8\001\002\000\044\003\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\055\uffc4\070\uffc4\077\uffc4\100" +
    "\uffc4\001\002\000\044\003\uffc9\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\uffc9\055\uffc9\070\uffc9\077\uffc9\100\uffc9" +
    "\001\002\000\044\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\055\uffc5\070\uffc5\077\uffc5\100\uffc5\001" +
    "\002\000\004\051\366\001\002\000\004\076\367\001\002" +
    "\000\044\003\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010" +
    "\uffc6\011\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6" +
    "\017\uffc6\055\uffc6\070\uffc6\077\uffc6\100\uffc6\001\002\000" +
    "\044\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017" +
    "\uffca\055\uffca\070\uffca\077\uffca\100\uffca\001\002\000\044" +
    "\003\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011" +
    "\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\017\uffdd" +
    "\055\uffdd\070\uffdd\077\uffdd\100\uffdd\001\002\000\044\003" +
    "\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\055" +
    "\uffe4\070\uffe4\077\uffe4\100\uffe4\001\002\000\004\076\376" +
    "\001\002\000\004\076\375\001\002\000\044\003\uffd1\004" +
    "\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\055\uffd1\070" +
    "\uffd1\077\uffd1\100\uffd1\001\002\000\044\003\uffd5\004\uffd5" +
    "\005\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\055\uffd5\070\uffd5" +
    "\077\uffd5\100\uffd5\001\002\000\020\057\u0100\070\u0102\071" +
    "\u0104\072\u0101\073\u0103\074\u0108\075\u0106\001\002\000\016" +
    "\003\u0118\071\u0104\072\u0101\073\u0103\074\u0108\075\u0106\001" +
    "\002\000\020\047\ufff1\051\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\063\ufff1\076\ufff1\001\002\000\014\071\u0104\072\u0101\073" +
    "\u0103\074\u0108\075\u0106\001\002\000\020\047\uffed\051\uffed" +
    "\056\uffed\057\uffed\060\uffed\063\uffed\076\uffed\001\002\000" +
    "\020\047\ufff0\051\ufff0\056\ufff0\057\ufff0\060\ufff0\063\ufff0" +
    "\076\ufff0\001\002\000\004\063\u010c\001\002\000\020\047" +
    "\uffef\051\uffef\056\uffef\057\uffef\060\uffef\063\uffef\076\uffef" +
    "\001\002\000\004\076\u0109\001\002\000\020\047\uffee\051" +
    "\uffee\056\uffee\057\uffee\060\uffee\063\uffee\076\uffee\001\002" +
    "\000\004\055\u010a\001\002\000\004\076\u010b\001\002\000" +
    "\004\054\ufffb\001\002\000\006\046\u010e\050\u010d\001\002" +
    "\000\014\071\u0104\072\u0101\073\u0103\074\u0108\075\u0106\001" +
    "\002\000\014\071\u0104\072\u0101\073\u0103\074\u0108\075\u0106" +
    "\001\002\000\004\047\u0110\001\002\000\004\076\uffe9\001" +
    "\002\000\004\051\u0112\001\002\000\004\076\uffe8\001\002" +
    "\000\004\076\u0114\001\002\000\004\055\u0115\001\002\000" +
    "\004\076\u0116\001\002\000\004\054\ufffc\001\002\000\004" +
    "\076\u011c\001\002\000\004\076\u0119\001\002\000\004\055" +
    "\u011a\001\002\000\004\076\u011b\001\002\000\004\054\ufffd" +
    "\001\002\000\004\055\u011d\001\002\000\004\076\u011e\001" +
    "\002\000\004\054\ufffe\001\002\000\004\002\001\001\002" +
    "\000\132\003\u012f\004\u0126\005\u0133\006\u0121\007\u012e\010" +
    "\u0134\011\u0139\012\u013b\013\u012d\014\u0129\015\u0138\016\u0132" +
    "\017\u0135\020\075\021\114\022\106\023\115\024\070\025" +
    "\066\026\067\027\077\030\074\031\076\032\116\033\111" +
    "\034\117\035\113\036\112\037\121\040\104\041\072\042" +
    "\101\043\120\056\u0127\057\u0122\060\u0123\070\u0137\071\u0104" +
    "\072\u0101\073\u0103\074\u0108\075\u0106\102\u012c\103\u0136\001" +
    "\002\000\012\056\uff54\057\uff54\060\uff54\076\uff54\001\002" +
    "\000\022\003\u018b\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074" +
    "\ufff3\075\ufff3\077\ufff3\001\002\000\122\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031" +
    "\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\070\ufff2\071\ufff2\072" +
    "\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2\077\ufff2\001\002" +
    "\000\012\056\uff57\057\uff57\060\uff57\076\uff57\001\002\000" +
    "\012\056\uff59\057\uff59\060\uff59\076\uff59\001\002\000\012" +
    "\056\uff56\057\uff56\060\uff56\076\uff56\001\002\000\122\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034\ufff4\035\ufff4\036" +
    "\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\070\ufff4" +
    "\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076\ufff4\077" +
    "\ufff4\001\002\000\134\003\u012f\004\u0126\005\u0133\006\u0121" +
    "\007\u012e\010\u0134\011\u0139\012\u013b\013\u012d\014\u0129\015" +
    "\u0138\016\u0132\017\u0135\020\075\021\114\022\106\023\115" +
    "\024\070\025\066\026\067\027\077\030\074\031\076\032" +
    "\116\033\111\034\117\035\113\036\112\037\121\040\104" +
    "\041\072\042\101\043\120\055\u0189\056\u0127\057\u0122\060" +
    "\u0123\070\u0137\071\u0104\072\u0101\073\u0103\074\u0108\075\u0106" +
    "\102\u012c\103\u0136\001\002\000\012\056\uff4e\057\uff4e\060" +
    "\uff4e\076\uff4e\001\002\000\134\003\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031" +
    "\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\060\ufff5\070\ufff5\071\ufff5\072\ufff5\073\ufff5\074\ufff5" +
    "\075\ufff5\102\ufff5\103\ufff5\001\002\000\134\003\ufff8\004" +
    "\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8" +
    "\013\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021" +
    "\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\055\ufff8" +
    "\056\ufff8\057\ufff8\060\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\102\ufff8\103\ufff8\001\002\000\010" +
    "\056\u0127\057\u013d\060\u0123\001\002\000\012\056\uff4f\057" +
    "\uff4f\060\uff4f\076\uff4f\001\002\000\012\056\uff53\057\uff53" +
    "\060\uff53\076\uff53\001\002\000\012\056\u0127\057\u013d\060" +
    "\u0123\076\u017c\001\002\000\020\070\u0174\071\u0104\072\u0101" +
    "\073\u0103\074\u0108\075\u0106\077\u0173\001\002\000\010\056" +
    "\u0127\057\u013d\060\u0123\001\002\000\012\056\uff4c\057\uff4c" +
    "\060\uff4c\076\uff4c\001\002\000\012\056\uff55\057\uff55\060" +
    "\uff55\076\uff55\001\002\000\012\056\uff52\057\uff52\060\uff52" +
    "\076\uff52\001\002\000\012\056\uff4b\057\uff4b\060\uff4b\076" +
    "\uff4b\001\002\000\010\056\u0127\057\u013d\060\u0123\001\002" +
    "\000\026\003\u0154\056\u0127\057\u013d\060\u0123\071\u0104\072" +
    "\u0101\073\u0103\074\u0108\075\u0106\076\u0157\001\002\000\012" +
    "\056\uff4d\057\uff4d\060\uff4d\076\uff4d\001\002\000\012\056" +
    "\uff51\057\uff51\060\uff51\076\uff51\001\002\000\012\056\uff58" +
    "\057\uff58\060\uff58\076\uff58\001\002\000\024\040\104\041" +
    "\072\042\101\043\120\050\u0143\056\uff50\057\uff50\060\uff50" +
    "\070\u0142\001\002\000\010\056\u0127\057\u013d\060\u0123\001" +
    "\002\000\122\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\043\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075" +
    "\ufff3\076\ufff3\077\ufff3\001\002\000\004\070\u013f\001\002" +
    "\000\004\076\u0140\001\002\000\134\003\uff2f\004\uff2f\005" +
    "\uff2f\006\uff2f\007\uff2f\010\uff2f\011\uff2f\012\uff2f\013\uff2f" +
    "\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f\022" +
    "\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030\uff2f" +
    "\031\uff2f\032\uff2f\033\uff2f\034\uff2f\035\uff2f\036\uff2f\037" +
    "\uff2f\040\uff2f\041\uff2f\042\uff2f\043\uff2f\055\uff2f\056\uff2f" +
    "\057\uff2f\060\uff2f\070\uff2f\071\uff2f\072\uff2f\073\uff2f\074" +
    "\uff2f\075\uff2f\102\uff2f\103\uff2f\001\002\000\004\044\u014c" +
    "\001\002\000\004\044\u0149\001\002\000\020\023\143\034" +
    "\141\035\142\037\136\073\130\074\124\075\126\001\002" +
    "\000\004\051\u0145\001\002\000\004\044\u0146\001\002\000" +
    "\012\040\104\041\072\042\101\043\120\001\002\000\004" +
    "\076\u0148\001\002\000\134\003\uff39\004\uff39\005\uff39\006" +
    "\uff39\007\uff39\010\uff39\011\uff39\012\uff39\013\uff39\014\uff39" +
    "\015\uff39\016\uff39\017\uff39\020\uff39\021\uff39\022\uff39\023" +
    "\uff39\024\uff39\025\uff39\026\uff39\027\uff39\030\uff39\031\uff39" +
    "\032\uff39\033\uff39\034\uff39\035\uff39\036\uff39\037\uff39\040" +
    "\uff39\041\uff39\042\uff39\043\uff39\055\uff39\056\uff39\057\uff39" +
    "\060\uff39\070\uff39\071\uff39\072\uff39\073\uff39\074\uff39\075" +
    "\uff39\102\uff39\103\uff39\001\002\000\012\040\104\041\072" +
    "\042\101\043\120\001\002\000\004\076\u014b\001\002\000" +
    "\134\003\uff38\004\uff38\005\uff38\006\uff38\007\uff38\010\uff38" +
    "\011\uff38\012\uff38\013\uff38\014\uff38\015\uff38\016\uff38\017" +
    "\uff38\020\uff38\021\uff38\022\uff38\023\uff38\024\uff38\025\uff38" +
    "\026\uff38\027\uff38\030\uff38\031\uff38\032\uff38\033\uff38\034" +
    "\uff38\035\uff38\036\uff38\037\uff38\040\uff38\041\uff38\042\uff38" +
    "\043\uff38\055\uff38\056\uff38\057\uff38\060\uff38\070\uff38\071" +
    "\uff38\072\uff38\073\uff38\074\uff38\075\uff38\102\uff38\103\uff38" +
    "\001\002\000\006\050\u014e\070\u014d\001\002\000\004\076" +
    "\u0152\001\002\000\020\023\143\034\141\035\142\037\136" +
    "\073\130\074\124\075\126\001\002\000\004\051\u0150\001" +
    "\002\000\004\076\u0151\001\002\000\134\003\uff36\004\uff36" +
    "\005\uff36\006\uff36\007\uff36\010\uff36\011\uff36\012\uff36\013" +
    "\uff36\014\uff36\015\uff36\016\uff36\017\uff36\020\uff36\021\uff36" +
    "\022\uff36\023\uff36\024\uff36\025\uff36\026\uff36\027\uff36\030" +
    "\uff36\031\uff36\032\uff36\033\uff36\034\uff36\035\uff36\036\uff36" +
    "\037\uff36\040\uff36\041\uff36\042\uff36\043\uff36\055\uff36\056" +
    "\uff36\057\uff36\060\uff36\070\uff36\071\uff36\072\uff36\073\uff36" +
    "\074\uff36\075\uff36\102\uff36\103\uff36\001\002\000\134\003" +
    "\uff37\004\uff37\005\uff37\006\uff37\007\uff37\010\uff37\011\uff37" +
    "\012\uff37\013\uff37\014\uff37\015\uff37\016\uff37\017\uff37\020" +
    "\uff37\021\uff37\022\uff37\023\uff37\024\uff37\025\uff37\026\uff37" +
    "\027\uff37\030\uff37\031\uff37\032\uff37\033\uff37\034\uff37\035" +
    "\uff37\036\uff37\037\uff37\040\uff37\041\uff37\042\uff37\043\uff37" +
    "\055\uff37\056\uff37\057\uff37\060\uff37\070\uff37\071\uff37\072" +
    "\uff37\073\uff37\074\uff37\075\uff37\102\uff37\103\uff37\001\002" +
    "\000\006\063\u010c\076\u0167\001\002\000\014\071\u0104\072" +
    "\u0101\073\u0103\074\u0108\075\u0106\001\002\000\004\076\u0162" +
    "\001\002\000\120\004\u0126\005\u0133\006\u0121\007\u012e\010" +
    "\u0134\011\u0139\012\u015c\013\u012d\014\u0129\015\u0138\016\u0132" +
    "\017\u0135\020\075\021\114\022\106\023\115\024\070\025" +
    "\066\026\067\027\077\030\074\031\076\032\116\033\111" +
    "\034\117\035\113\036\112\037\121\040\104\041\072\042" +
    "\101\043\120\071\u0104\072\u0101\073\u0103\074\u0108\075\u0106" +
    "\076\u0158\077\u015b\001\002\000\134\003\uff35\004\uff35\005" +
    "\uff35\006\uff35\007\uff35\010\uff35\011\uff35\012\uff35\013\uff35" +
    "\014\uff35\015\uff35\016\uff35\017\uff35\020\uff35\021\uff35\022" +
    "\uff35\023\uff35\024\uff35\025\uff35\026\uff35\027\uff35\030\uff35" +
    "\031\uff35\032\uff35\033\uff35\034\uff35\035\uff35\036\uff35\037" +
    "\uff35\040\uff35\041\uff35\042\uff35\043\uff35\055\uff35\056\uff35" +
    "\057\uff35\060\uff35\070\uff35\071\uff35\072\uff35\073\uff35\074" +
    "\uff35\075\uff35\102\uff35\103\uff35\001\002\000\134\003\uff47" +
    "\004\uff47\005\uff47\006\uff47\007\uff47\010\uff47\011\uff47\012" +
    "\uff47\013\uff47\014\uff47\015\uff47\016\uff47\017\uff47\020\uff47" +
    "\021\uff47\022\uff47\023\uff47\024\uff47\025\uff47\026\uff47\027" +
    "\uff47\030\uff47\031\uff47\032\uff47\033\uff47\034\uff47\035\uff47" +
    "\036\uff47\037\uff47\040\uff47\041\uff47\042\uff47\043\uff47\055" +
    "\uff47\056\uff47\057\uff47\060\uff47\070\uff47\071\uff47\072\uff47" +
    "\073\uff47\074\uff47\075\uff47\102\uff47\103\uff47\001\002\000" +
    "\004\076\u0161\001\002\000\004\076\u0160\001\002\000\004" +
    "\076\u015f\001\002\000\004\076\uff50\001\002\000\006\063" +
    "\u010c\076\u015e\001\002\000\134\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\043\ufff7\055\ufff7\056\ufff7\057" +
    "\ufff7\060\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7\074\ufff7" +
    "\075\ufff7\102\ufff7\103\ufff7\001\002\000\134\003\uff4a\004" +
    "\uff4a\005\uff4a\006\uff4a\007\uff4a\010\uff4a\011\uff4a\012\uff4a" +
    "\013\uff4a\014\uff4a\015\uff4a\016\uff4a\017\uff4a\020\uff4a\021" +
    "\uff4a\022\uff4a\023\uff4a\024\uff4a\025\uff4a\026\uff4a\027\uff4a" +
    "\030\uff4a\031\uff4a\032\uff4a\033\uff4a\034\uff4a\035\uff4a\036" +
    "\uff4a\037\uff4a\040\uff4a\041\uff4a\042\uff4a\043\uff4a\055\uff4a" +
    "\056\uff4a\057\uff4a\060\uff4a\070\uff4a\071\uff4a\072\uff4a\073" +
    "\uff4a\074\uff4a\075\uff4a\102\uff4a\103\uff4a\001\002\000\134" +
    "\003\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\070\ufff6\071\ufff6" +
    "\072\ufff6\073\ufff6\074\ufff6\075\ufff6\102\ufff6\103\ufff6\001" +
    "\002\000\134\003\uff3c\004\uff3c\005\uff3c\006\uff3c\007\uff3c" +
    "\010\uff3c\011\uff3c\012\uff3c\013\uff3c\014\uff3c\015\uff3c\016" +
    "\uff3c\017\uff3c\020\uff3c\021\uff3c\022\uff3c\023\uff3c\024\uff3c" +
    "\025\uff3c\026\uff3c\027\uff3c\030\uff3c\031\uff3c\032\uff3c\033" +
    "\uff3c\034\uff3c\035\uff3c\036\uff3c\037\uff3c\040\uff3c\041\uff3c" +
    "\042\uff3c\043\uff3c\055\uff3c\056\uff3c\057\uff3c\060\uff3c\070" +
    "\uff3c\071\uff3c\072\uff3c\073\uff3c\074\uff3c\075\uff3c\102\uff3c" +
    "\103\uff3c\001\002\000\134\003\uff45\004\uff45\005\uff45\006" +
    "\uff45\007\uff45\010\uff45\011\uff45\012\uff45\013\uff45\014\uff45" +
    "\015\uff45\016\uff45\017\uff45\020\uff45\021\uff45\022\uff45\023" +
    "\uff45\024\uff45\025\uff45\026\uff45\027\uff45\030\uff45\031\uff45" +
    "\032\uff45\033\uff45\034\uff45\035\uff45\036\uff45\037\uff45\040" +
    "\uff45\041\uff45\042\uff45\043\uff45\055\uff45\056\uff45\057\uff45" +
    "\060\uff45\070\uff45\071\uff45\072\uff45\073\uff45\074\uff45\075" +
    "\uff45\102\uff45\103\uff45\001\002\000\006\063\u010c\076\u0166" +
    "\001\002\000\004\076\u0165\001\002\000\134\003\uff33\004" +
    "\uff33\005\uff33\006\uff33\007\uff33\010\uff33\011\uff33\012\uff33" +
    "\013\uff33\014\uff33\015\uff33\016\uff33\017\uff33\020\uff33\021" +
    "\uff33\022\uff33\023\uff33\024\uff33\025\uff33\026\uff33\027\uff33" +
    "\030\uff33\031\uff33\032\uff33\033\uff33\034\uff33\035\uff33\036" +
    "\uff33\037\uff33\040\uff33\041\uff33\042\uff33\043\uff33\055\uff33" +
    "\056\uff33\057\uff33\060\uff33\070\uff33\071\uff33\072\uff33\073" +
    "\uff33\074\uff33\075\uff33\102\uff33\103\uff33\001\002\000\134" +
    "\003\uff34\004\uff34\005\uff34\006\uff34\007\uff34\010\uff34\011" +
    "\uff34\012\uff34\013\uff34\014\uff34\015\uff34\016\uff34\017\uff34" +
    "\020\uff34\021\uff34\022\uff34\023\uff34\024\uff34\025\uff34\026" +
    "\uff34\027\uff34\030\uff34\031\uff34\032\uff34\033\uff34\034\uff34" +
    "\035\uff34\036\uff34\037\uff34\040\uff34\041\uff34\042\uff34\043" +
    "\uff34\055\uff34\056\uff34\057\uff34\060\uff34\070\uff34\071\uff34" +
    "\072\uff34\073\uff34\074\uff34\075\uff34\102\uff34\103\uff34\001" +
    "\002\000\134\003\uff46\004\uff46\005\uff46\006\uff46\007\uff46" +
    "\010\uff46\011\uff46\012\uff46\013\uff46\014\uff46\015\uff46\016" +
    "\uff46\017\uff46\020\uff46\021\uff46\022\uff46\023\uff46\024\uff46" +
    "\025\uff46\026\uff46\027\uff46\030\uff46\031\uff46\032\uff46\033" +
    "\uff46\034\uff46\035\uff46\036\uff46\037\uff46\040\uff46\041\uff46" +
    "\042\uff46\043\uff46\055\uff46\056\uff46\057\uff46\060\uff46\070" +
    "\uff46\071\uff46\072\uff46\073\uff46\074\uff46\075\uff46\102\uff46" +
    "\103\uff46\001\002\000\016\071\u0104\072\u0101\073\u0103\074" +
    "\u0108\075\u0106\076\u016a\001\002\000\006\063\u010c\076\u016d" +
    "\001\002\000\134\003\uff42\004\uff42\005\uff42\006\uff42\007" +
    "\uff42\010\uff42\011\uff42\012\uff42\013\uff42\014\uff42\015\uff42" +
    "\016\uff42\017\uff42\020\uff42\021\uff42\022\uff42\023\uff42\024" +
    "\uff42\025\uff42\026\uff42\027\uff42\030\uff42\031\uff42\032\uff42" +
    "\033\uff42\034\uff42\035\uff42\036\uff42\037\uff42\040\uff42\041" +
    "\uff42\042\uff42\043\uff42\055\uff42\056\uff42\057\uff42\060\uff42" +
    "\070\uff42\071\uff42\072\uff42\073\uff42\074\uff42\075\uff42\102" +
    "\uff42\103\uff42\001\002\000\004\076\u016c\001\002\000\134" +
    "\003\uff44\004\uff44\005\uff44\006\uff44\007\uff44\010\uff44\011" +
    "\uff44\012\uff44\013\uff44\014\uff44\015\uff44\016\uff44\017\uff44" +
    "\020\uff44\021\uff44\022\uff44\023\uff44\024\uff44\025\uff44\026" +
    "\uff44\027\uff44\030\uff44\031\uff44\032\uff44\033\uff44\034\uff44" +
    "\035\uff44\036\uff44\037\uff44\040\uff44\041\uff44\042\uff44\043" +
    "\uff44\055\uff44\056\uff44\057\uff44\060\uff44\070\uff44\071\uff44" +
    "\072\uff44\073\uff44\074\uff44\075\uff44\102\uff44\103\uff44\001" +
    "\002\000\134\003\uff43\004\uff43\005\uff43\006\uff43\007\uff43" +
    "\010\uff43\011\uff43\012\uff43\013\uff43\014\uff43\015\uff43\016" +
    "\uff43\017\uff43\020\uff43\021\uff43\022\uff43\023\uff43\024\uff43" +
    "\025\uff43\026\uff43\027\uff43\030\uff43\031\uff43\032\uff43\033" +
    "\uff43\034\uff43\035\uff43\036\uff43\037\uff43\040\uff43\041\uff43" +
    "\042\uff43\043\uff43\055\uff43\056\uff43\057\uff43\060\uff43\070" +
    "\uff43\071\uff43\072\uff43\073\uff43\074\uff43\075\uff43\102\uff43" +
    "\103\uff43\001\002\000\014\071\u0104\072\u0101\073\u0103\074" +
    "\u0108\075\u0106\001\002\000\006\063\u010c\076\u0172\001\002" +
    "\000\004\076\u0171\001\002\000\134\003\uff3d\004\uff3d\005" +
    "\uff3d\006\uff3d\007\uff3d\010\uff3d\011\uff3d\012\uff3d\013\uff3d" +
    "\014\uff3d\015\uff3d\016\uff3d\017\uff3d\020\uff3d\021\uff3d\022" +
    "\uff3d\023\uff3d\024\uff3d\025\uff3d\026\uff3d\027\uff3d\030\uff3d" +
    "\031\uff3d\032\uff3d\033\uff3d\034\uff3d\035\uff3d\036\uff3d\037" +
    "\uff3d\040\uff3d\041\uff3d\042\uff3d\043\uff3d\055\uff3d\056\uff3d" +
    "\057\uff3d\060\uff3d\070\uff3d\071\uff3d\072\uff3d\073\uff3d\074" +
    "\uff3d\075\uff3d\102\uff3d\103\uff3d\001\002\000\134\003\uff3e" +
    "\004\uff3e\005\uff3e\006\uff3e\007\uff3e\010\uff3e\011\uff3e\012" +
    "\uff3e\013\uff3e\014\uff3e\015\uff3e\016\uff3e\017\uff3e\020\uff3e" +
    "\021\uff3e\022\uff3e\023\uff3e\024\uff3e\025\uff3e\026\uff3e\027" +
    "\uff3e\030\uff3e\031\uff3e\032\uff3e\033\uff3e\034\uff3e\035\uff3e" +
    "\036\uff3e\037\uff3e\040\uff3e\041\uff3e\042\uff3e\043\uff3e\055" +
    "\uff3e\056\uff3e\057\uff3e\060\uff3e\070\uff3e\071\uff3e\072\uff3e" +
    "\073\uff3e\074\uff3e\075\uff3e\102\uff3e\103\uff3e\001\002\000" +
    "\004\076\u017b\001\002\000\014\071\u0104\072\u0101\073\u0103" +
    "\074\u0108\075\u0106\001\002\000\006\063\u010c\076\u0178\001" +
    "\002\000\004\076\u0177\001\002\000\134\003\uff40\004\uff40" +
    "\005\uff40\006\uff40\007\uff40\010\uff40\011\uff40\012\uff40\013" +
    "\uff40\014\uff40\015\uff40\016\uff40\017\uff40\020\uff40\021\uff40" +
    "\022\uff40\023\uff40\024\uff40\025\uff40\026\uff40\027\uff40\030" +
    "\uff40\031\uff40\032\uff40\033\uff40\034\uff40\035\uff40\036\uff40" +
    "\037\uff40\040\uff40\041\uff40\042\uff40\043\uff40\055\uff40\056" +
    "\uff40\057\uff40\060\uff40\070\uff40\071\uff40\072\uff40\073\uff40" +
    "\074\uff40\075\uff40\102\uff40\103\uff40\001\002\000\134\003" +
    "\uff41\004\uff41\005\uff41\006\uff41\007\uff41\010\uff41\011\uff41" +
    "\012\uff41\013\uff41\014\uff41\015\uff41\016\uff41\017\uff41\020" +
    "\uff41\021\uff41\022\uff41\023\uff41\024\uff41\025\uff41\026\uff41" +
    "\027\uff41\030\uff41\031\uff41\032\uff41\033\uff41\034\uff41\035" +
    "\uff41\036\uff41\037\uff41\040\uff41\041\uff41\042\uff41\043\uff41" +
    "\055\uff41\056\uff41\057\uff41\060\uff41\070\uff41\071\uff41\072" +
    "\uff41\073\uff41\074\uff41\075\uff41\102\uff41\103\uff41\001\002" +
    "\000\004\076\u017a\001\002\000\134\003\uff3f\004\uff3f\005" +
    "\uff3f\006\uff3f\007\uff3f\010\uff3f\011\uff3f\012\uff3f\013\uff3f" +
    "\014\uff3f\015\uff3f\016\uff3f\017\uff3f\020\uff3f\021\uff3f\022" +
    "\uff3f\023\uff3f\024\uff3f\025\uff3f\026\uff3f\027\uff3f\030\uff3f" +
    "\031\uff3f\032\uff3f\033\uff3f\034\uff3f\035\uff3f\036\uff3f\037" +
    "\uff3f\040\uff3f\041\uff3f\042\uff3f\043\uff3f\055\uff3f\056\uff3f" +
    "\057\uff3f\060\uff3f\070\uff3f\071\uff3f\072\uff3f\073\uff3f\074" +
    "\uff3f\075\uff3f\102\uff3f\103\uff3f\001\002\000\134\003\uff3a" +
    "\004\uff3a\005\uff3a\006\uff3a\007\uff3a\010\uff3a\011\uff3a\012" +
    "\uff3a\013\uff3a\014\uff3a\015\uff3a\016\uff3a\017\uff3a\020\uff3a" +
    "\021\uff3a\022\uff3a\023\uff3a\024\uff3a\025\uff3a\026\uff3a\027" +
    "\uff3a\030\uff3a\031\uff3a\032\uff3a\033\uff3a\034\uff3a\035\uff3a" +
    "\036\uff3a\037\uff3a\040\uff3a\041\uff3a\042\uff3a\043\uff3a\055" +
    "\uff3a\056\uff3a\057\uff3a\060\uff3a\070\uff3a\071\uff3a\072\uff3a" +
    "\073\uff3a\074\uff3a\075\uff3a\102\uff3a\103\uff3a\001\002\000" +
    "\134\003\uff2e\004\uff2e\005\uff2e\006\uff2e\007\uff2e\010\uff2e" +
    "\011\uff2e\012\uff2e\013\uff2e\014\uff2e\015\uff2e\016\uff2e\017" +
    "\uff2e\020\uff2e\021\uff2e\022\uff2e\023\uff2e\024\uff2e\025\uff2e" +
    "\026\uff2e\027\uff2e\030\uff2e\031\uff2e\032\uff2e\033\uff2e\034" +
    "\uff2e\035\uff2e\036\uff2e\037\uff2e\040\uff2e\041\uff2e\042\uff2e" +
    "\043\uff2e\055\uff2e\056\uff2e\057\uff2e\060\uff2e\070\uff2e\071" +
    "\uff2e\072\uff2e\073\uff2e\074\uff2e\075\uff2e\102\uff2e\103\uff2e" +
    "\001\002\000\016\070\u017f\071\u0104\072\u0101\073\u0103\074" +
    "\u0108\075\u0106\001\002\000\004\076\u0181\001\002\000\004" +
    "\076\u0180\001\002\000\134\003\uff31\004\uff31\005\uff31\006" +
    "\uff31\007\uff31\010\uff31\011\uff31\012\uff31\013\uff31\014\uff31" +
    "\015\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023" +
    "\uff31\024\uff31\025\uff31\026\uff31\027\uff31\030\uff31\031\uff31" +
    "\032\uff31\033\uff31\034\uff31\035\uff31\036\uff31\037\uff31\040" +
    "\uff31\041\uff31\042\uff31\043\uff31\055\uff31\056\uff31\057\uff31" +
    "\060\uff31\070\uff31\071\uff31\072\uff31\073\uff31\074\uff31\075" +
    "\uff31\102\uff31\103\uff31\001\002\000\134\003\uff32\004\uff32" +
    "\005\uff32\006\uff32\007\uff32\010\uff32\011\uff32\012\uff32\013" +
    "\uff32\014\uff32\015\uff32\016\uff32\017\uff32\020\uff32\021\uff32" +
    "\022\uff32\023\uff32\024\uff32\025\uff32\026\uff32\027\uff32\030" +
    "\uff32\031\uff32\032\uff32\033\uff32\034\uff32\035\uff32\036\uff32" +
    "\037\uff32\040\uff32\041\uff32\042\uff32\043\uff32\055\uff32\056" +
    "\uff32\057\uff32\060\uff32\070\uff32\071\uff32\072\uff32\073\uff32" +
    "\074\uff32\075\uff32\102\uff32\103\uff32\001\002\000\016\071" +
    "\u0104\072\u0101\073\u0103\074\u0108\075\u0106\076\u0184\001\002" +
    "\000\006\063\u010c\076\u0187\001\002\000\134\003\uff3b\004" +
    "\uff3b\005\uff3b\006\uff3b\007\uff3b\010\uff3b\011\uff3b\012\uff3b" +
    "\013\uff3b\014\uff3b\015\uff3b\016\uff3b\017\uff3b\020\uff3b\021" +
    "\uff3b\022\uff3b\023\uff3b\024\uff3b\025\uff3b\026\uff3b\027\uff3b" +
    "\030\uff3b\031\uff3b\032\uff3b\033\uff3b\034\uff3b\035\uff3b\036" +
    "\uff3b\037\uff3b\040\uff3b\041\uff3b\042\uff3b\043\uff3b\055\uff3b" +
    "\056\uff3b\057\uff3b\060\uff3b\070\uff3b\071\uff3b\072\uff3b\073" +
    "\uff3b\074\uff3b\075\uff3b\102\uff3b\103\uff3b\001\002\000\004" +
    "\076\u0186\001\002\000\134\003\uff48\004\uff48\005\uff48\006" +
    "\uff48\007\uff48\010\uff48\011\uff48\012\uff48\013\uff48\014\uff48" +
    "\015\uff48\016\uff48\017\uff48\020\uff48\021\uff48\022\uff48\023" +
    "\uff48\024\uff48\025\uff48\026\uff48\027\uff48\030\uff48\031\uff48" +
    "\032\uff48\033\uff48\034\uff48\035\uff48\036\uff48\037\uff48\040" +
    "\uff48\041\uff48\042\uff48\043\uff48\055\uff48\056\uff48\057\uff48" +
    "\060\uff48\070\uff48\071\uff48\072\uff48\073\uff48\074\uff48\075" +
    "\uff48\102\uff48\103\uff48\001\002\000\134\003\uff49\004\uff49" +
    "\005\uff49\006\uff49\007\uff49\010\uff49\011\uff49\012\uff49\013" +
    "\uff49\014\uff49\015\uff49\016\uff49\017\uff49\020\uff49\021\uff49" +
    "\022\uff49\023\uff49\024\uff49\025\uff49\026\uff49\027\uff49\030" +
    "\uff49\031\uff49\032\uff49\033\uff49\034\uff49\035\uff49\036\uff49" +
    "\037\uff49\040\uff49\041\uff49\042\uff49\043\uff49\055\uff49\056" +
    "\uff49\057\uff49\060\uff49\070\uff49\071\uff49\072\uff49\073\uff49" +
    "\074\uff49\075\uff49\102\uff49\103\uff49\001\002\000\134\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\055\ufff9\056\ufff9\057\ufff9\060\ufff9\070\ufff9\071\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\075\ufff9\102\ufff9\103\ufff9\001\002" +
    "\000\004\076\u018a\001\002\000\004\053\uffff\001\002\000" +
    "\004\076\u018c\001\002\000\134\003\uff30\004\uff30\005\uff30" +
    "\006\uff30\007\uff30\010\uff30\011\uff30\012\uff30\013\uff30\014" +
    "\uff30\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30" +
    "\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30\030\uff30\031" +
    "\uff30\032\uff30\033\uff30\034\uff30\035\uff30\036\uff30\037\uff30" +
    "\040\uff30\041\uff30\042\uff30\043\uff30\055\uff30\056\uff30\057" +
    "\uff30\060\uff30\070\uff30\071\uff30\072\uff30\073\uff30\074\uff30" +
    "\075\uff30\102\uff30\103\uff30\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\006\002\004\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\007\001\001\000\002" +
    "\001\001\000\004\012\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\013\035\014\036\017\014\024\016" +
    "\026\042\027\040\030\017\031\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\021\353\022" +
    "\350\025\352\032\356\001\001\000\004\022\337\001\001" +
    "\000\006\022\262\025\264\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\252\026\254\027\255\030\257" +
    "\031\253\001\001\000\010\021\101\022\070\025\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\014\050\017" +
    "\014\024\016\026\042\027\040\030\017\031\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\217\032" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\122\025\124\032\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\023\137\032\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\150" +
    "\001\001\000\002\001\001\000\004\032\152\001\001\000" +
    "\002\001\001\000\004\032\154\001\001\000\002\001\001" +
    "\000\004\032\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\161\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\170\001\001" +
    "\000\002\001\001\000\004\032\172\001\001\000\002\001" +
    "\001\000\006\023\174\032\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\177\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\206\032\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\211\032\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\222\025\223\032\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\233" +
    "\022\231\032\236\001\001\000\002\001\001\000\006\023" +
    "\246\032\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\023\242\032\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\312\032\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\270\025" +
    "\271\032\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\301\032\300" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\023\304\032\136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\315\025\316\032\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\327\032\324\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\331\032\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\343\032\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\364\032\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0104\011\u0106\001\001\000\006" +
    "\010\u0104\011\u0116\001\001\000\002\001\001\000\006\010" +
    "\u0104\011\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u0110\001\001\000" +
    "\004\010\u010e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\005\u0127\006" +
    "\u012a\007\u012f\010\u013b\020\u0129\021\u0123\022\u0139\025\u0124" +
    "\033\u0130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\006\u0187\007\u012f\010" +
    "\u013b\020\u0129\021\u0123\022\u0139\025\u0124\033\u0130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\u0181\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\u017c\001\001\000\006\010\u0174\011\u0175\001" +
    "\001\000\004\007\u016d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\u0167\001\001\000\010\007\u0155\010\u0152\011\u0154\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0140\001\001\000\004\007\u013d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u0143" +
    "\032\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0146\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0149\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\023\u014e" +
    "\032\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u0162\011\u0163\001\001\000\002\001\001\000\016\010" +
    "\u015c\011\u0159\021\u0123\022\u0139\025\u0124\033\u0158\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\u0168\011\u016a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\u016e\011\u016f\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u0178\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\u017d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\u0182\011\u0184\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int contadorPrograma = 256;
    int auxiliarContador = 0;
    int contAccesoMemoria = 0;
    String constanteMemoria;
    private Symbol s;
    ArrayList<String> Etiquetas;
    ArrayList<Variables> listaVariables = new ArrayList<Variables>();
    ArrayList<clasificacionLineas> Lineas = new ArrayList<clasificacionLineas>();
    direccionesMemoria dM = new direccionesMemoria();
    tablaSimbolos tS = new tablaSimbolos();
    codigoMaquina codigo = new codigoMaquina();
    public void agregarVariables(String nombre,String tipo,String valor,String direccion){
        String tamanio;
        if(tipo.equals("DB")){
            tamanio = "BYTE";
        }else if(tipo.equals("DW")){
            tamanio = "PALABRA";
        }else if(tipo.equals("EQU")){
            tamanio = "PALABRA";
        }else{
            tamanio = "";
        }
        tS.agregarVariables(nombre,tipo,valor,tamanio,direccion);
    }

    public void etiquetasEnsambaldor(ArrayList<String> Etiquetas){
        this.Etiquetas = Etiquetas;
    }

    private int isNumeric(String numeroCadena){
        int numero;
        try{
            if(numeroCadena.contains("H")){
                numeroCadena = numeroCadena.replace("H","");
                numero = Integer.parseInt(numeroCadena,16);
            }else if(numeroCadena.contains("B")){
                numeroCadena = numeroCadena.replace("B","");
                numero = Integer.parseInt(numeroCadena,2);
            }else{
                numero = Integer.parseInt(numeroCadena);
            }
        }catch(NumberFormatException excepcion){
            return -1;
        }
        return numero;
    }
    
    public int calcularLongitudCadena(String cadena){
        if(cadena.contains("$")){
            return cadena.length()-3;
        }
        return cadena.length()-2;
    }

    public String codigoMaquina(String contador, String codicInstruccion){
        String ceros = "0";
        for(int i = 0 ; i < (4 - contador.length()) ; i++){
            ceros += "0";
        }
        contador = ceros + contador;
        return (contador+" "+codicInstruccion);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // erroresDataSegment ::= error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" MAL DECLARACION DE VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // erroresDataSegment ::= Constantes tipoVariables variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" MAL DELCARACION DE VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // erroresDataSegment ::= dw error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" MAL DELCARACION DE VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // erroresDataSegment ::= error tipoVariables variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" MAL DELCARACION DE VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // erroresDataSegment ::= error tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" MAL DELCARACION DE VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // erroresDataSegment ::= variable error estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" TIPO DE VARIABLE NO VALIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // erroresDataSegment ::= variable error Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" TIPO DE VARIABLE NO VALIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // erroresDataSegment ::= variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE ETIQUETA NO VALIDA O INSTRUCCION MAL DECLARADA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // erroresDataSegment ::= mov registrosSegmento coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" PARAMETROS INCORRECTOS DE LA INSTRUCCION MOV"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // erroresDataSegment ::= mov registrosSegmento coma variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" PARAMETROS INCORRECTOS PARA LA INSTRUCCION MOV"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // erroresDataSegment ::= mov variable coma registrosSegmento jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" NO SE ADMITE MEMORIA Y REGISTRO DE SEGMENTO"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // erroresDataSegment ::= mov parenCA accesoMemoria parenCC coma registrosSegmento jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NO SE ADMITE MEMORIA Y REGISTRO DE SEGMENTO"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // erroresDataSegment ::= tipoVariables errorEnsamblador jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE VARIABLE NULA Y CONSTANTE NO VALIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // erroresDataSegment ::= constanteInvalida tipoVariables jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" CONSTANTE NULA Y NOMBRE DE VARIABLE NO VALIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // erroresDataSegment ::= variable tipoVariables errorDSegInstrucciones jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" ASIGNACION NO VALIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // erroresDataSegment ::= errorDSegInstrucciones tipoVariables estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EL NOMBRE DE LA VARIABLE ES UNA PLABRA RESERVADA (REGISTRO,INSTRUCCION,ETC)"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // erroresDataSegment ::= errorDSegInstrucciones tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EL NOMBRE DE LA VARIABLE ES UNA PLABRA RESERVADA (REGISTRO,INSTRUCCION,ETC)"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // erroresDataSegment ::= tipoVariables variable Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" ORDEN INCORRECTO PARA DECLARAR LA VARIABLE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // erroresDataSegment ::= tipoVariables estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE VARIABLE NO DEFINIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // erroresDataSegment ::= tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE VARIABLE NO DEFINIDA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // erroresDataSegment ::= variableGrande tipoVariables jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" VARIABLE CON NOMBRE MUY GRANDE Y CONSTANTE NULA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // erroresDataSegment ::= variableGrande tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" VARIABLE CON NOMBRE MUY GRANDE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // erroresDataSegment ::= variableGrande tipoVariables estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" VARIABLE CON NOMBRE MUY GRANDE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // erroresDataSegment ::= variable estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NO SE HA DECLARADO EL TIPO DE VARIABLE(DW,EQU,ETC)"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // erroresDataSegment ::= variable Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NO SE HA DECLARADO EL TIPO DE VARIABLE(DW,EQU,ETC)"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // erroresDataSegment ::= variable tipoVariables jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" FALTA ASIGNAR UNA CONSTANTE"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // erroresDataSegment ::= constanteInvalida tipoVariables estructuraDup jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE VARIABLE INVALIDO"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // erroresDataSegment ::= constanteInvalida tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE VARIABLE INVALIDO"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // erroresDataSegment ::= variable tipoVariables errorEnsamblador jump 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresDataSegment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // errorDSegInstrucciones ::= jnl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // errorDSegInstrucciones ::= jnp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // errorDSegInstrucciones ::= jnc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // errorDSegInstrucciones ::= ja 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // errorDSegInstrucciones ::= sub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // errorDSegInstrucciones ::= mov 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // errorDSegInstrucciones ::= push 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // errorDSegInstrucciones ::= lds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // errorDSegInstrucciones ::= stosw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // errorDSegInstrucciones ::= pusha 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // errorDSegInstrucciones ::= cwd 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // errorDSegInstrucciones ::= cbw 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // errorDSegInstrucciones ::= registrosSegmento 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // errorDSegInstrucciones ::= registrospGeneral 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // errorDSegInstrucciones ::= registrosHighLow 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("errorDSegInstrucciones",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // erroresCodeSegment ::= variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NOMBRE DE ETIQUETA NO VALIDA O INSTRUCCION MAL DECLARADA"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresCodeSegment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // erroresCodeSegment ::= error jump 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresCodeSegment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // erroresCodeSegment ::= errorEnsamblador jump 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresCodeSegment",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // variablesErrorSaltos ::= coma 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // variablesErrorSaltos ::= mov 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // variablesErrorSaltos ::= variable doblepunto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // variablesErrorSaltos ::= estructuraDup 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // variablesErrorSaltos ::= es 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // variablesErrorSaltos ::= ds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // variablesErrorSaltos ::= cs 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // variablesErrorSaltos ::= ss 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // variablesErrorSaltos ::= bp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // variablesErrorSaltos ::= sp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // variablesErrorSaltos ::= di 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // variablesErrorSaltos ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // variablesErrorSaltos ::= dl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // variablesErrorSaltos ::= dh 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // variablesErrorSaltos ::= dx 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // variablesErrorSaltos ::= cl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // variablesErrorSaltos ::= ch 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // variablesErrorSaltos ::= cx 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // variablesErrorSaltos ::= bl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // variablesErrorSaltos ::= bh 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // variablesErrorSaltos ::= bx 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // variablesErrorSaltos ::= al 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // variablesErrorSaltos ::= ah 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // variablesErrorSaltos ::= ax 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // variablesErrorSaltos ::= Constantes 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // variablesErrorSaltos ::= endp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // variablesErrorSaltos ::= proc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // variablesErrorSaltos ::= endm 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // variablesErrorSaltos ::= macro 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // variablesErrorSaltos ::= wordptr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variablesErrorSaltos",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // erroresSaltos ::= variablesErrorSaltos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresSaltos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // erroresSaltos ::= erroresSaltos variablesErrorSaltos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("erroresSaltos",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // accesoMemoria ::= constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        RESULT = 1;
                    }else{
                        RESULT = 2;
                    }
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // accesoMemoria ::= bp signos di signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 011";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 011";;
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // accesoMemoria ::= bp signos si signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 010";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 010";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // accesoMemoria ::= bx signos di signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 001";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 001";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // accesoMemoria ::= bx signos si signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 000";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 000";
                    }        
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));       
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // accesoMemoria ::= bp signos di 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 011";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // accesoMemoria ::= bp signos si 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 010";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // accesoMemoria ::= bx signos di 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 001";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // accesoMemoria ::= bx signos si 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 000";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // accesoMemoria ::= di signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 101";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 101";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // accesoMemoria ::= bp signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 110";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 110";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // accesoMemoria ::= si signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 100";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 100";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // accesoMemoria ::= bx signos constantesNumericas 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    int numero = isNumeric(valor.toString());
                    if(numero <= 255 && numero >= -128){
                        contAccesoMemoria = 1;
                        RESULT = "01 111";
                    }else{
                        contAccesoMemoria = 2;
                        RESULT = "10 111";
                    }
                    constanteMemoria = codigo.addCeros(Integer.toHexString(numero));
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // accesoMemoria ::= di 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 101";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // accesoMemoria ::= si 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 100";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // accesoMemoria ::= bx 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contAccesoMemoria = 0; constanteMemoria = " "; RESULT = "00 111";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("accesoMemoria",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // registrosHighLow ::= dl 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "010";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // registrosHighLow ::= cl 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "001";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // registrosHighLow ::= bl 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "011";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // registrosHighLow ::= al 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "000";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // registrosHighLow ::= dh 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "110";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // registrosHighLow ::= ch 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "101";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // registrosHighLow ::= bh 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "111";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // registrosHighLow ::= ah 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "100";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosHighLow",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // registrosSegmento ::= es 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "000";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosSegmento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // registrosSegmento ::= ds 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "011";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosSegmento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // registrosSegmento ::= ss 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "010";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosSegmento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // registrosSegmento ::= cs 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "001";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrosSegmento",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // registrospGeneral ::= di 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "111";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // registrospGeneral ::= si 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "110";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // registrospGeneral ::= bp 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "101";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // registrospGeneral ::= sp 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "100";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // registrospGeneral ::= bx 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "011";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // registrospGeneral ::= dx 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "010";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // registrospGeneral ::= cx 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "001";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // registrospGeneral ::= ax 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = "000";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("registrospGeneral",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // instruccionMov ::= mov error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" PARAMETROS O MAL DECLARACION DE LA INSTRUCCION MOV"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // instruccionMov ::= mov registrosSegmento coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001110","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += 2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // instruccionMov ::= mov registrospGeneral coma registrosSegmento jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001100","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += 2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // instruccionMov ::= mov registrosHighLow coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numeroEntero = isNumeric(numero.toString());
                    if(numeroEntero != -1){
                        if(numeroEntero > 256){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NUMERO FUERA DE RANGO"));
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000110","11","000",registro.toString())+" "+codigo.addCeros(Integer.toHexString(numeroEntero))+"H"));
                            contadorPrograma += (3);
                        }
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,""));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // instruccionMov ::= mov registrospGeneral coma wordptr parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001011","00","000",registro.toString())+" "+constanteMemoria+"H"));
                        contadorPrograma += (2);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // instruccionMov ::= mov registrospGeneral coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorNumericoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorNumericoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorNumerico = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        int numero = isNumeric(valorNumerico.toString());
                        if(numero >= -127 && numero <= 255){
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000111","11","000",registro.toString())+" "+codigo.addCeros(Integer.toHexString(numero))+"H"));
                            contadorPrograma += (3);
                        }else{
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000111","11","000",registro.toString())+" "+codigo.addCeros(Integer.toHexString(numero))+"H"));
                            contadorPrograma += (4);
                        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // instruccionMov ::= mov parenCA accesoMemoria parenCC coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int Numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object Numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        int numero = isNumeric(Numero.toString());
                        String[] datos = valorR.toString().split(" ");
                        if(numero >= -127 && numero <= 255){
                            contadorPrograma += (3+(contAccesoMemoria));
                        }else{
                            contadorPrograma += (4+(contAccesoMemoria));
                        }
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000110",datos[0],"000",datos[1])+" "+constanteMemoria+" "+codigo.addCeros(Integer.toHexString(numero))+"H"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // instruccionMov ::= mov variable coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorNumericoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorNumericoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorNumerico = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),0) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        int numero = isNumeric(valorNumerico.toString());
                        if(numero >= -127 && numero <= 255){
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000110","00","000","110")+" "+codigo.addCeros(Integer.toHexString(numero))+" H"));
                            contadorPrograma += 5;
                        }else{
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000111","00","000","110")+" "+codigo.addCeros(Integer.toHexString(numero))+" H"));
                            contadorPrograma += 6;
                        }
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" ESTA VARIABLE NO A SIDO DECLARADA O TIENE UN NOMBRE NO VALIDO"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // instruccionMov ::= mov registrosHighLow coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001000","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += 2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // instruccionMov ::= mov registrospGeneral coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001001","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += 2;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // instruccionMov ::= mov parenCA accesoMemoria parenCC coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001000",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // instruccionMov ::= mov byteptr parenCA accesoMemoria parenCC coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001000",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // instruccionMov ::= mov wordptr parenCA accesoMemoria parenCC coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001001",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // instruccionMov ::= mov parenCA accesoMemoria parenCC coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001000",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // instruccionMov ::= mov variable coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registros = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),8) == 2){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001000","00",registros.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += 4;
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 8 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instruccionMov ::= mov variable coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),16) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001001","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += 4;
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 16 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instruccionMov ::= mov registrosHighLow coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001010",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // instruccionMov ::= mov registrosHighLow coma variable jump 
            {
              Object RESULT =null;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),8) == 2){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001010","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += 4;
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 8 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // instruccionMov ::= mov registrospGeneral coma variable jump 
            {
              Object RESULT =null;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),16) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001011","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += 4;
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 16 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // instruccionMov ::= mov registrospGeneral coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10001011",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionMov",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // instruccionSub ::= sub error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" PARAMETRO INCORRECTOS PARA LA INSTRCUCCION SUB"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // instruccionSub ::= sub registrosHighLow coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object numero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numeroEntero = isNumeric(numero.toString());
                    if(numeroEntero != -1){
                        if(numeroEntero > 256){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" NUMERO FUERA DE RANGO")); 
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000000","11","101",registro.toString())+" "+codigo.addCeros(Integer.toHexString(numeroEntero))+" H"));
                            contadorPrograma += (3); 
                        }
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,""));
                        contadorPrograma += (3); 
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // instruccionSub ::= sub registrospGeneral coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorNumeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorNumeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorNumero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        int numero = isNumeric(valorNumero.toString());
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000001","11","101",registro.toString())+" "+codigo.addCeros(Integer.toHexString(numero))+" H"));
                        contadorPrograma += (4);   
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // instruccionSub ::= sub parenCA accesoMemoria parenCC coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorNumeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorNumeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorNumero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        int numero = isNumeric(valorNumero.toString());
                        String[] datos = valorR.toString().split(" ");
                        if(numero >= -127 && numero <= 255){
                            contadorPrograma += (3+contAccesoMemoria);
                        }else{
                            contadorPrograma += (4+contAccesoMemoria);
                        }
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000000",datos[0],"101",datos[1])+" "+constanteMemoria+" "+codigo.addCeros(Integer.toHexString(numero))+"H"));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // instruccionSub ::= sub variable coma constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorNumeroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorNumeroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorNumero = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),0) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        int numero = isNumeric(valorNumero.toString());
                        if(numero >= -127 && numero <= 255){
                            contadorPrograma += 5;
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000000","00","101","110")+" "+codigo.addCeros(Integer.toHexString(numero))+" "+tS.direccionVariable(valor)+" H"));
                        }else{
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000001","00","101","110")+" "+codigo.addCeros(Integer.toHexString(numero))+" "+tS.direccionVariable(valor)+" H"));
                            contadorPrograma += 6;
                        }
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" ESTA VARIABLE NO A SIDO DECLARADA O TIENE UN NOMBRE NO VALIDO"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // instruccionSub ::= sub registrosHighLow coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101000","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += (2);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instruccionSub ::= sub registrospGeneral coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registro1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registro1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registro2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registro2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101001","11",registro2.toString(),registro1.toString())+" H"));
                        contadorPrograma += (2);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instruccionSub ::= sub parenCA accesoMemoria parenCC coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101000",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // instruccionSub ::= sub parenCA accesoMemoria parenCC coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101001",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // instruccionSub ::= sub variable coma registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registros = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),8) == 2){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101000","00",registros.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += (4);
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 8 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // instruccionSub ::= sub variable coma registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int registrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int registrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object registros = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),16) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101001","00",registros.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += (4);
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 16 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instruccionSub ::= sub registrosHighLow coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000000",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccionSub ::= sub registrosHighLow coma variable jump 
            {
              Object RESULT =null;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),8) == 2){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101010","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += (4);
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 8 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccionSub ::= sub registrospGeneral coma variable jump 
            {
              Object RESULT =null;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableSub(valor.toString(),16) == 1){
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("00101011","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                        contadorPrograma += (2);
                    }else{
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"ERROR: "+(valorleft+1)+" EL VALOR DE LA VARIABLE NO ES DE 16 BITS"));
                    }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // instruccionSub ::= sub registrospGeneral coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);    
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("10000001",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                        contadorPrograma += (2+(contAccesoMemoria));
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionSub",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instruccionPush ::= push error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" PUSH REQUIERE UN PARAMETRO (REGISTRO , REGISTROS DE SEGMENTO, MEMORIA O INMEDIATO)"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instruccionPush ::= push registrosHighLow jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EL PARAMETRO NO TIENE EL TAMAÑO DE 16 BITS"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // instruccionPush ::= push parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            String[] datos = valorR.toString().split(" ");
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11111111",datos[0],"110",datos[1])+" "+constanteMemoria+"H"));
                            contadorPrograma += (2+(contAccesoMemoria));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // instruccionPush ::= push constantesNumericas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            int numero = isNumeric(valor.toString());
                            if(numero <= 255 && numero >= -128){
                                contadorPrograma += 2;
                            }else{
                                contadorPrograma += 3;
                            }
                            String Codigo = codigo.addCeros(Integer.toHexString(numero));
                            String cero = "";
                            for(int i = 0 ; i < (4 - Codigo.length()) ; i++){
                                cero += "0";
                            }
                            Codigo = cero + Codigo;
                            Lineas.add(new clasificacionLineas(valorleft+1,"68 "+Codigo+" H"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // instruccionPush ::= push variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariablePush(valor.toString()) == 1){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"FF 36 "+tS.direccionVariable(valor)+" H"));
                            contadorPrograma += 2;
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" VARIABLE NO EXISTENTE O NO TIENE VALOR DE 16 BITS"));
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // instruccionPush ::= push registrosSegmento jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            if(valorR.equals("000")){
                                Lineas.add(new clasificacionLineas(valorleft+1,"06 H"));
                            }else if(valorR.equals("001")){
                                Lineas.add(new clasificacionLineas(valorleft+1,"0E H"));
                            }else if(valorR.equals("010")){
                                Lineas.add(new clasificacionLineas(valorleft+1,"16 H"));
                            }else if(valorR.equals("011")){
                                Lineas.add(new clasificacionLineas(valorleft+1,"1E H"));
                            }
                            contadorPrograma += 2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // instruccionPush ::= push registrospGeneral jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11111111","11","110",v.toString())+" H"));
                            contadorPrograma += 2;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionPush",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionLds ::= lds error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" PARAMETROS INCORRECTOS PARA LA INSTRUCCION LDS"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionLds",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccionLds ::= lds registrospGeneral coma parenCA accesoMemoria parenCC jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorRleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorRright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valorR = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        String[] datos = valorR.toString().split(" ");
                        Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000101",datos[0],registro.toString(),datos[1])+" "+constanteMemoria+"H"));
                            contadorPrograma += (2+contAccesoMemoria);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionLds",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccionLds ::= lds registrospGeneral coma variable jump 
            {
              Object RESULT =null;
		int registroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int registroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object registro = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(tS.buscarVariableLDS(valor.toString()) == 1){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,codigo.convertirHexadecimal("11000101","00",registro.toString(),"110")+" "+tS.direccionVariable(valor)+"H"));
                            contadorPrograma += 4;
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" VARIABLE NO EXISTENTE O NO SON VALIDOS LOS PARAMETROS"));
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionLds",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccionesdeSalto ::= jnl error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EN EL TEXTO: "+valor+" SE NECESITA EL NOMBRE DE UN LABEL"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instruccionesdeSalto ::= jnp error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EN EL TEXTO: "+valor+" SE NECESITA EL NOMBRE DE UN LABEL VALIDO"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccionesdeSalto ::= jnc error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EN EL TEXTO: "+valor+" SE NECESITA EL NOMBRE DE UN LABEL"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccionesdeSalto ::= ja error jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(valorleft+1,"ERROR EN LA LINEA: "+(valorleft+1)+" EN EL TEXTO: "+valor+" SE NECESITA EL NOMBRE DE UN LABEL"));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccionesdeSalto ::= jnl variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreEtiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreEtiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombreEtiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!(Etiquetas.contains(nombreEtiqueta.toString()))){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"ERROR EN LA LINEA: "+(nombreEtiquetaleft+1)+" EN EL TEXTO: "+nombreEtiqueta+" NOMBRE DE ETIQUETA NO DEFINIDA "));
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"00 E0 "+tS.direccionEtiqueta(nombreEtiqueta)+" H"));
                            contadorPrograma += 4;
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccionesdeSalto ::= jnp variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreEtiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreEtiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombreEtiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!(Etiquetas.contains(nombreEtiqueta.toString()))){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"ERROR EN LA LINEA: "+(nombreEtiquetaleft+1)+" EN EL TEXTO: "+nombreEtiqueta+" NOMBRE DE ETIQUETA NO DEFINIDA "));
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"0F 8E "+tS.direccionEtiqueta(nombreEtiqueta)+" H"));
                            contadorPrograma += 4;
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccionesdeSalto ::= jnc variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreEtiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreEtiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombreEtiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!(Etiquetas.contains(nombreEtiqueta.toString()))){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"ERROR EN LA LINEA: "+(nombreEtiquetaleft+1)+" EN EL TEXTO: "+nombreEtiqueta+" NOMBRE DE ETIQUETA NO DEFINIDA "));
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"0F 8E "+tS.direccionEtiqueta(nombreEtiqueta)+" H"));
                            contadorPrograma += 4;
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionesdeSalto ::= ja variable jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nombreEtiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreEtiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object nombreEtiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		if(!(Etiquetas.contains(nombreEtiqueta.toString()))){
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"ERROR EN LA LINEA: "+(nombreEtiquetaleft+1)+" EN EL TEXTO: "+nombreEtiqueta+" NOMBRE DE ETIQUETA NO DEFINIDA "));
                        }else{
                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                            Lineas.add(new clasificacionLineas(nombreEtiquetaleft+1,"00 E3 "+tS.direccionEtiqueta(nombreEtiqueta)+" H"));
                            contadorPrograma += 4;
                        }
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccionesdeSalto",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionInstrucciones ::= erroresCodeSegment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dM.agregarDirecciones((eleft+1),(contadorPrograma));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionInstrucciones ::= instruccionMov 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declaracionInstrucciones ::= instruccionLds 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // declaracionInstrucciones ::= instruccionSub 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // declaracionInstrucciones ::= instruccionPush 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // declaracionInstrucciones ::= instruccionesdeSalto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionInstrucciones ::= pusha jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),(contadorPrograma));
                        Lineas.add(new clasificacionLineas(valorleft+1,"90 H"));
                        contadorPrograma +=1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declaracionInstrucciones ::= stosw jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        Lineas.add(new clasificacionLineas(valorleft+1,"C3 H"));
                        contadorPrograma +=1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionInstrucciones ::= etiquetas instruccionesdeSalto 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarVariables(valor.toString(),"ETIQUETA","","NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionInstrucciones ::= etiquetas instruccionMov 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarVariables(valor.toString(),"ETIQUETA","","NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionInstrucciones ::= etiquetas instruccionLds 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarVariables(valor.toString(),"ETIQUETA","","NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declaracionInstrucciones ::= etiquetas instruccionSub 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarVariables(valor.toString(),"ETIQUETA","","NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declaracionInstrucciones ::= etiquetas instruccionPush 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		agregarVariables(valor.toString(),"ETIQUETA","","NULL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declaracionInstrucciones ::= etiquetas jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),contadorPrograma);
                        agregarVariables(valor.toString(),"ETIQUETA","",Integer.toHexString(contadorPrograma));
                        Lineas.add(new clasificacionLineas(valorleft+1,""));
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declaracionInstrucciones ::= cwd jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),(contadorPrograma));
                        Lineas.add(new clasificacionLineas(valorleft+1,"CE H"));
                        contadorPrograma += 1;                        
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracionInstrucciones ::= cbw jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        dM.agregarDirecciones((valorleft+1),(contadorPrograma));
                        Lineas.add(new clasificacionLineas(valorleft+1,"D50A H"));
                        contadorPrograma += 1;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionInstrucciones",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Instrucciones ::= declaracionInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Instrucciones ::= Instrucciones declaracionInstrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Instrucciones",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // estructuraDup ::= Constantes dup parenCA Constantes parenCC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraDup",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // estructuraDup ::= Constantes dup parenNA Constantes parenNC 
            {
              Object RESULT =null;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor3 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor4 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valor5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valor5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor5 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor1+" "+valor2+" "+valor3+" "+valor4+" "+valor5;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraDup",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constantesNumericas ::= enteros 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesNumericas",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constantesNumericas ::= noBinarios 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesNumericas",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constantesNumericas ::= noHexadecimales 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantesNumericas",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constantes ::= enteros 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constantes ::= noBinarios 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Constantes ::= noHexadecimales 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Constantes ::= cadenacomillasdoble 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Constantes ::= cadenacomillassimples 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constantes",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoVariables ::= equ 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoVariables ::= dw 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoVariables ::= db 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = valor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipoVariables",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // estructuraVariables ::= erroresDataSegment 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		dM.agregarDirecciones((eleft+1),contadorPrograma);contadorPrograma += 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // estructuraVariables ::= variable tipoVariables estructuraDup jump 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		dM.agregarDirecciones((nombreleft+1),contadorPrograma);
                            String[] constanteDup = valor.toString().split(" ");
                            int numero = isNumeric(constanteDup[0]);
                            if(numero != -1){
                                if(tipo.equals("DB")){
                                    if(numero >= 0 && numero <= 65536){
                                        agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),Integer.toHexString(contadorPrograma));
                                        contadorPrograma += numero;
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA"));     
                                    }else{
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"ERROR EN LA LINEA: "+(nombreleft+1)+" NUMERO FUERA DE RANGO"));
                                        contadorPrograma += 0;
                                    }
                                }else if(tipo.equals("DW") || tipo.equals("EQU")){
                                    if(numero >= 0 && numero <= 65536){
                                        agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),Integer.toHexString(contadorPrograma));
                                        contadorPrograma += numero*2;
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA"));    
                                    }else{
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"ERROR EN LA LINEA: "+(nombreleft+1)+" NUMERO FUERA DE RANGO"));
                                        contadorPrograma += 0;
                                    }
                                }
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // estructuraVariables ::= variable tipoVariables Constantes jump 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		dM.agregarDirecciones((nombreleft+1),contadorPrograma);
                            int numero = isNumeric(valor.toString());
                            if(numero != -1){
                                if(tipo.equals("DB")){
                                    if(numero >= 0 && numero <= 256){ 
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA")); 
                                        agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),Integer.toHexString(contadorPrograma));
                                        contadorPrograma += 1;
                                    }else{
                                        Lineas.add(new clasificacionLineas(nombreleft+1,"ERROR EN LA LINEA: "+(nombreleft+1)+" NUMERO FUERA DE RANGO"));
                                        contadorPrograma += 0;
                                    }
                                }else if(tipo.equals("DW") || tipo.equals("EQU")){
                                    if(tipo.equals("DW")){
                                        if(numero >= 0 && numero <= 65536){
                                            agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),Integer.toHexString(contadorPrograma));
                                            contadorPrograma += 2;
                                            Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA"));
                                        
                                        }else{
                                            Lineas.add(new clasificacionLineas(nombreleft+1,"ERROR EN LA LINEA: "+(nombreleft+1)+" NUMERO FUERA DE RANGO"));
                                            contadorPrograma += 0;
                                        }
                                    }else{
                                        if(numero >= 0 && numero <= 65536){
                                            agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),"");
                                            Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA"));
                                        }else{
                                            Lineas.add(new clasificacionLineas(nombreleft+1,"ERROR EN LA LINEA: "+(nombreleft+1)+" NUMERO FUERA DE RANGO"));
                                            contadorPrograma += 0;
                                        }
                                    }
                                }
                            }else{
                                int longitud = calcularLongitudCadena(valor.toString());
                                Lineas.add(new clasificacionLineas(nombreleft+1,"LINEA: "+(nombreleft+1)+" CORRECTA"));
                                agregarVariables(nombre.toString(),tipo.toString(),valor.toString(),Integer.toHexString(contadorPrograma));
                                contadorPrograma += longitud;
                            }
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("estructuraVariables",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionVariables ::= estructuraVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionVariables ::= declaracionVariables estructuraVariables 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracionVariables",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // cSegment ::= codesegment jump Instrucciones ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor1left+1)+" CORRECTA"));
                                dM.agregarDirecciones((valorleft+1),auxiliarContador);
                                dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cSegment",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stSegment ::= stacksegment jump estructuraDup jump ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            contadorPrograma = 0;
                                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                                            Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor1left+1,"ERROR EN LA LINEA: "+(valor1left+1)+" MAL DECLARACION DEL DUP EN STACK SEGMENT"));
                                            Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor2left+1)+" CORRECTA"));
                                            dM.agregarDirecciones((valor1left+1),256);
                                            dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                            auxiliarContador = contadorPrograma;
                                            contadorPrograma = 256;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stSegment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stSegment ::= stacksegment jump variable estructuraDup jump ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            contadorPrograma = 0;
                                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                                            Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor1left+1,"ERROR EN LA LINEA: "+(valor1left+1)+" MAL DECLARACION DEL DUP EN STACK SEGMENT"));
                                            Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor2left+1)+" CORRECTA"));
                                            dM.agregarDirecciones((valor1left+1),256);
                                            dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                            auxiliarContador =  contadorPrograma;
                                            contadorPrograma = 256;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stSegment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stSegment ::= stacksegment jump dw error jump ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            dM.agregarDirecciones((valorleft+1),contadorPrograma);
                                            Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor1left+1,"ERROR EN LA LINEA: "+(valor1left+1)+" MAL DECLARACION DEL DUP EN STACK SEGMENT"));
                                            Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor2left+1)+" CORRECTA"));
                                            dM.agregarDirecciones((valor1left+1),256);
                                            dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                            auxiliarContador =  contadorPrograma;
                                            contadorPrograma = 256;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stSegment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stSegment ::= stacksegment jump dw estructuraDup jump ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valor2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		dM.agregarDirecciones((valorleft+1),contadorPrograma);
                                    String[] constanteDup = valor1.toString().split(" ");
                                    int numero = isNumeric(constanteDup[0]);
                                    if(numero != -1){
                                        if((numero >= 0) && (numero <= 65536)){
                                            Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor1left+1,"LINEA: "+(valor1left+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor2left+1)+" CORRECTA"));
                                            contadorPrograma = 256;
                                            dM.agregarDirecciones((valor1left+1),contadorPrograma);
                                            contadorPrograma += 2*numero;
                                            dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                        }else{
                                            Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                            Lineas.add(new clasificacionLineas(valor1left+1,"ERROR EN LA LINEA: "+(valor1left+1)+" NUMERO FUERA DE RANGO"));
                                            Lineas.add(new clasificacionLineas(valor2left+1,"LINEA: "+(valor2left+1)+" CORRECTA"));
                                            dM.agregarDirecciones((valor1left+1),contadorPrograma);
                                            dM.agregarDirecciones((valor2left+1),contadorPrograma);
                                        }
                                    }
                                    auxiliarContador =  contadorPrograma;
                                    contadorPrograma = 256;
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stSegment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // dSegment ::= datasegment jump declaracionVariables ends jump 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valor1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valor1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object valor1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                Lineas.add(new clasificacionLineas(valorleft+1,"LINEA: "+(valorleft+1)+" CORRECTA"));
                                Lineas.add(new clasificacionLineas(valor1left+1,"LINEA: "+(valor1left+1)+" CORRECTA"));
                                dM.agregarDirecciones((valor1left+1),contadorPrograma);
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dSegment",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= dSegment stSegment cSegment 
            {
              Object RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		contadorPrograma = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

