/* The following code was generated by JFlex 1.4.3 on 4/11/21 01:49 AM */

package ensambladores;
import static ensambladores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/11/21 01:49 AM from the specification file
 * <tt>C:/Users/danie/OneDrive/Documentos/PruebaEnsambladores/Ensambladores2/src/ensambladores/LexeTabla.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\57\66\0\1\1\1\26\1\3\1\35\1\36\1\55\1\47"+
    "\1\32\1\15\1\45\1\0\1\41\1\4\1\16\1\20\1\5\1\0"+
    "\1\43\1\6\1\17\1\31\1\25\1\7\1\51\1\0\1\53\6\0"+
    "\1\2\1\30\1\10\1\37\1\40\1\56\1\50\1\34\1\21\1\46"+
    "\1\0\1\42\1\11\1\22\1\24\1\12\1\0\1\44\1\13\1\23"+
    "\1\33\1\27\1\14\1\52\1\0\1\54\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\37\1\41\0\1\2\15\0\2\2\1\0\1\3"+
    "\1\0\1\2\1\3\2\2\2\0\1\2\1\3\2\0"+
    "\1\2\1\4\1\2\4\0\2\2\4\0\1\2\1\0"+
    "\1\2\13\0\1\2\2\0\3\2\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u0450"+
    "\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570\0\u05a0\0\u05d0"+
    "\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750"+
    "\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u02d0\0\u0870\0\u08a0"+
    "\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20"+
    "\0\u0390\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70"+
    "\0\u0ba0\0\60\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0"+
    "\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\60\0\u0ed0\0\u0f00\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\60"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1080\0\u1170\0\u11a0\0\u11d0"+
    "\0\u1200\0\u1230\0\u1170\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320"+
    "\0\u1350\0\u1380\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0"+
    "\0\u14d0\0\u10e0\0\u1500\0\u1530\0\u11d0\0\u1560\0\u1590\0\u15c0"+
    "\0\u15f0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\2\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\5\2\1\25\1\2"+
    "\1\26\1\27\1\2\1\30\1\2\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\2\2\1\37\1\40\4\2\62\0"+
    "\1\41\14\0\1\42\16\0\1\43\24\0\1\44\17\0"+
    "\1\45\14\0\1\46\24\0\1\47\2\0\1\42\16\0"+
    "\1\50\12\0\1\51\36\0\1\52\10\0\1\53\46\0"+
    "\1\54\10\0\1\55\27\0\1\56\1\0\1\57\13\0"+
    "\1\60\11\0\1\61\37\0\1\62\2\0\1\45\13\0"+
    "\1\63\11\0\1\64\41\0\1\65\6\0\1\66\50\0"+
    "\1\67\6\0\1\70\26\0\1\71\5\0\1\72\12\0"+
    "\1\73\7\0\1\74\42\0\1\75\24\0\1\76\34\0"+
    "\1\77\15\0\1\100\57\0\1\101\64\0\1\102\36\0"+
    "\1\103\21\0\1\104\37\0\1\105\13\0\1\106\57\0"+
    "\1\107\63\0\1\102\54\0\1\110\41\0\1\66\35\0"+
    "\1\111\34\0\1\43\23\0\1\112\35\0\1\46\20\0"+
    "\1\113\16\0\1\114\15\0\1\111\23\0\1\115\21\0"+
    "\1\116\13\0\1\112\22\0\1\53\14\0\1\56\15\0"+
    "\1\110\31\0\1\66\13\0\1\71\13\0\1\117\20\0"+
    "\1\120\1\0\1\121\1\122\1\102\1\123\7\0\1\124"+
    "\1\0\1\102\5\0\1\125\7\0\1\102\2\0\1\126"+
    "\5\0\1\125\3\0\1\102\6\0\1\127\5\0\1\130"+
    "\1\131\1\102\1\123\6\0\1\132\1\0\1\102\3\0"+
    "\1\133\7\0\1\102\1\0\1\134\5\0\1\133\3\0"+
    "\1\102\23\0\1\56\20\0\1\135\42\0\1\71\15\0"+
    "\1\136\16\0\1\102\2\0\1\102\1\0\1\102\26\0"+
    "\1\102\57\0\1\102\25\0\1\102\56\0\1\102\6\0"+
    "\1\102\1\0\1\102\23\0\1\102\57\0\1\102\30\0"+
    "\1\102\52\0\1\102\1\0\1\137\61\0\1\102\53\0"+
    "\1\102\11\0\1\102\17\0\1\140\47\0\1\141\73\0"+
    "\1\102\23\0\1\142\60\0\1\143\52\0\1\144\61\0"+
    "\1\102\11\0\1\102\2\0\1\145\14\0\1\140\50\0"+
    "\1\102\41\0\1\102\1\0\1\146\61\0\1\102\53\0"+
    "\1\102\10\0\1\102\15\0\1\140\47\0\1\147\72\0"+
    "\1\102\27\0\1\150\60\0\1\151\46\0\1\152\65\0"+
    "\1\102\10\0\1\102\2\0\1\153\12\0\1\140\50\0"+
    "\1\102\32\0\1\102\13\0\1\154\76\0\1\155\26\0"+
    "\1\102\11\0\1\102\107\0\1\102\16\0\1\110\61\0"+
    "\1\102\12\0\1\156\74\0\1\157\31\0\1\102\10\0"+
    "\1\102\104\0\1\102\22\0\1\117\63\0\1\102\41\0"+
    "\1\102\4\0\1\102\53\0\1\102\10\0\1\102\76\0"+
    "\1\160\45\0\1\161\14\0\1\145\56\0\1\162\47\0"+
    "\1\163\12\0\1\153\43\0\1\102\72\0\1\123\72\0"+
    "\1\164\13\0\1\102\53\0\1\125\1\0\1\102\1\0"+
    "\1\102\1\123\11\0\1\102\5\0\1\125\7\0\1\102"+
    "\2\0\1\125\5\0\1\102\3\0\1\102\42\0\1\102"+
    "\61\0\1\123\71\0\1\165\17\0\1\102\47\0\1\133"+
    "\5\0\1\102\1\0\1\102\1\123\10\0\1\102\3\0"+
    "\1\133\7\0\1\102\1\0\1\133\5\0\1\102\3\0"+
    "\1\102\43\0\1\102\20\0\1\166\60\0\1\167\63\0"+
    "\1\170\57\0\1\171\52\0\1\102\53\0\1\102\34\0"+
    "\1\172\33\0\1\50\64\0\1\173\57\0\1\174\46\0"+
    "\1\102\53\0\1\102\35\0\1\175\36\0\1\63\64\0"+
    "\1\102\56\0\1\140\64\0\1\102\56\0\1\140\111\0"+
    "\1\102\7\0\1\176\130\0\1\102\13\0\1\177\120\0"+
    "\1\123\60\0\1\123\22\0\1\61\63\0\1\74\43\0"+
    "\1\102\16\0\1\102\40\0\1\140\16\0\1\102\45\0"+
    "\1\102\13\0\1\102\43\0\1\140\13\0\1\102\45\0"+
    "\1\200\17\0\1\102\43\0\1\201\15\0\1\102\55\0"+
    "\1\123\14\0\1\102\44\0\1\123\13\0\1\102\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5664];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\36\1\41\0\1\11\15\0\2\1\1\0"+
    "\1\11\1\0\4\1\2\0\2\1\2\0\1\1\1\11"+
    "\1\1\4\0\2\1\4\0\1\1\1\0\1\1\13\0"+
    "\1\1\2\0\3\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[129];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 114) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { lexeme=yytext(); return Simbolo;
          }
        case 5: break;
        case 3: 
          { lexeme=yytext(); return Instruccion_E;
          }
        case 6: break;
        case 4: 
          { lexeme=yytext(); return Instruccion_0;
          }
        case 7: break;
        case 1: 
          { return ERROR;
          }
        case 8: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
