/* The following code was generated by JFlex 1.4.3 on 10/10/21 12:58 PM */

package ensambladores;
import static ensambladores.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/10/21 12:58 PM from the specification file
 * <tt>C:/Users/Vanessa Sandoval/Documents/NetBeansProjects/Ensambladores/src/ensambladores/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\107\2\0\1\11\22\0\1\34\1\2\1\25\1\2"+
    "\1\41\1\2\1\0\1\27\1\20\1\21\2\2\1\12\1\33\1\2"+
    "\1\0\1\30\1\3\7\3\1\44\1\2\1\106\3\0\1\2\1\0"+
    "\1\56\1\15\1\35\1\10\1\46\1\7\1\72\1\31\1\75\1\102"+
    "\1\71\1\26\1\55\1\23\1\60\1\64\1\47\1\57\1\62\1\70"+
    "\1\50\1\100\1\17\1\104\1\77\1\5\6\4\1\36\1\14\1\52"+
    "\1\13\1\37\1\1\1\67\1\32\1\73\1\103\1\66\1\74\1\51"+
    "\1\40\1\54\1\63\1\42\1\53\1\61\1\65\1\43\1\101\1\16"+
    "\1\105\1\76\1\45\1\22\1\6\1\24\43\0\1\2\35\0\1\2"+
    "\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\12\1\1\2\35\1"+
    "\1\3\5\0\1\4\1\5\1\6\2\0\2\6\1\4"+
    "\1\5\2\0\1\6\15\0\1\2\5\0\1\6\20\0"+
    "\1\6\2\0\1\7\42\0\1\7\1\0\1\10\1\7"+
    "\1\0\1\7\1\10\2\7\2\0\1\7\1\10\12\0"+
    "\1\7\14\0\1\11\1\0\1\7\1\0\1\10\5\0"+
    "\2\7\2\0\1\7\7\0\1\10\2\0\1\10\1\0"+
    "\2\7\4\0\2\7\7\0\1\12\1\0\1\13\1\0"+
    "\2\14\6\0\1\2\1\0\1\15\1\0\1\7\1\15"+
    "\1\0\1\16\1\17\13\0\2\7\1\0\1\7\25\0"+
    "\1\20\36\0\1\21\1\22\35\0\1\23\1\0\1\24"+
    "\3\0\1\25\4\0\1\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\220\0\330\0\u0120\0\u0168\0\u01b0\0\u01f8"+
    "\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0\0\u0438"+
    "\0\u0480\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678"+
    "\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8"+
    "\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8"+
    "\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\330"+
    "\0\u0d38\0\u0d80\0\u0dc8\0\u0e10\0\110\0\330\0\110\0\u0e58"+
    "\0\u0ea0\0\330\0\u0ee8\0\330\0\110\0\u0f30\0\u0f78\0\u0fc0"+
    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
    "\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680"+
    "\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0"+
    "\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u07e0\0\110"+
    "\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8\0\u0900\0\u1c20\0\u1c68"+
    "\0\u1cb0\0\u1cf8\0\u1d40\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8"+
    "\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8"+
    "\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250\0\u2298\0\u22e0\0\u2328"+
    "\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2400\0\u2490\0\u24d8\0\u2520"+
    "\0\110\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u2568\0\u26d0"+
    "\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910"+
    "\0\u2958\0\330\0\u29a0\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08"+
    "\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70\0\u2cb8\0\110\0\u2d00"+
    "\0\u2c28\0\u2d48\0\330\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\u2eb0"+
    "\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u3060\0\u30a8\0\u2f40"+
    "\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8"+
    "\0\u0fc0\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450\0\u0ee8\0\u3498"+
    "\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690\0\u36d8"+
    "\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918"+
    "\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\110\0\u3a80\0\u2b50\0\u3ac8"+
    "\0\u3b10\0\110\0\u3b58\0\110\0\110\0\u3ba0\0\u3be8\0\u3c30"+
    "\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70"+
    "\0\u3210\0\u32e8\0\u3eb8\0\u3f00\0\u3f48\0\u3f90\0\u3fd8\0\u4020"+
    "\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u4218\0\u4260"+
    "\0\u42a8\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0"+
    "\0\u44e8\0\110\0\u4530\0\u4578\0\u45c0\0\u4608\0\u4650\0\u4698"+
    "\0\u46e0\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8"+
    "\0\u4920\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18"+
    "\0\u4b60\0\u4ba8\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58"+
    "\0\110\0\110\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08"+
    "\0\u4f50\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u5100\0\u5148"+
    "\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\u5388"+
    "\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580\0\110"+
    "\0\u55c8\0\110\0\u5610\0\u5658\0\u56a0\0\110\0\u56e8\0\u5730"+
    "\0\u5778\0\u57c0\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\2\1\3\2\4\2\2\1\5\2\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\2\2\1\15\1\2\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\6\1\25"+
    "\1\26\1\27\1\30\2\2\1\4\1\3\1\2\1\31"+
    "\2\4\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\2\2\1\47"+
    "\2\2\1\50\1\51\1\52\1\2\2\4\1\2\1\53"+
    "\1\54\1\55\1\56\1\57\1\6\113\0\1\3\24\0"+
    "\1\3\13\0\1\3\47\0\2\60\2\0\1\60\2\0"+
    "\2\60\2\0\1\60\1\61\1\0\1\62\2\0\1\63"+
    "\2\0\1\64\5\0\1\60\4\0\1\60\3\0\2\60"+
    "\1\0\1\60\4\0\1\60\2\0\3\60\3\0\1\60"+
    "\6\0\2\60\3\0\1\60\7\0\2\60\2\0\1\60"+
    "\2\0\2\60\1\65\1\0\1\66\1\61\1\0\1\62"+
    "\2\0\1\63\1\67\1\0\1\64\1\67\4\0\1\60"+
    "\4\0\1\60\2\0\1\70\2\60\1\0\1\60\3\0"+
    "\1\71\1\60\2\0\1\72\2\60\3\0\1\60\4\0"+
    "\1\73\1\0\2\60\3\0\1\72\14\0\2\6\21\0"+
    "\1\6\52\0\1\6\4\0\2\60\2\0\1\60\2\0"+
    "\1\60\1\74\1\0\1\75\1\60\1\61\1\0\1\62"+
    "\2\0\1\63\2\0\1\64\1\0\1\67\3\0\1\76"+
    "\1\77\3\0\1\60\3\0\2\60\1\0\1\60\4\0"+
    "\1\60\1\0\1\67\3\60\3\0\1\60\2\0\1\100"+
    "\1\67\2\0\2\60\3\0\1\60\1\67\6\0\2\60"+
    "\2\0\1\60\2\0\2\60\2\0\1\60\1\61\1\0"+
    "\1\62\2\0\1\63\2\0\1\64\1\0\1\67\3\0"+
    "\1\60\4\0\1\60\3\0\2\60\1\0\1\60\4\0"+
    "\1\60\2\0\1\60\1\72\1\60\3\0\1\60\3\0"+
    "\1\67\1\0\1\101\2\60\3\0\1\60\1\67\30\0"+
    "\1\67\2\0\1\67\32\0\1\67\12\0\1\102\4\0"+
    "\1\67\57\0\1\103\37\0\2\60\2\0\1\60\2\0"+
    "\2\60\2\0\1\60\1\61\1\0\1\62\2\0\1\63"+
    "\2\0\1\64\5\0\1\60\4\0\1\60\3\0\2\60"+
    "\1\0\1\60\4\0\1\60\1\104\1\0\3\60\3\0"+
    "\1\60\6\0\2\60\3\0\1\60\36\0\1\105\122\0"+
    "\1\106\11\0\1\107\30\0\2\110\2\0\1\110\1\0"+
    "\2\110\1\0\10\110\1\0\1\110\2\0\1\110\2\0"+
    "\13\110\1\0\42\110\11\0\1\111\35\0\1\112\7\0"+
    "\1\113\1\0\1\114\30\0\2\115\2\0\1\115\1\0"+
    "\2\115\1\0\10\115\1\0\1\115\2\0\1\115\2\0"+
    "\13\115\1\0\42\115\4\0\1\116\24\0\1\116\13\0"+
    "\1\116\71\0\1\117\146\0\1\120\52\0\1\121\74\0"+
    "\1\122\1\0\1\123\6\0\1\124\2\0\1\67\23\0"+
    "\1\125\2\0\1\126\1\0\1\67\21\0\1\67\7\0"+
    "\2\60\2\0\1\60\2\0\1\127\1\60\2\0\1\60"+
    "\1\61\1\0\1\62\2\0\1\63\2\0\1\64\1\0"+
    "\1\67\3\0\1\130\1\0\1\131\2\0\1\60\3\0"+
    "\2\60\1\0\1\60\4\0\1\60\2\0\3\60\3\0"+
    "\1\60\3\0\1\67\2\0\2\60\3\0\1\60\1\67"+
    "\42\0\1\132\1\0\1\133\16\0\1\67\65\0\1\134"+
    "\14\0\1\135\56\0\1\136\23\0\1\137\12\0\1\67"+
    "\63\0\1\140\4\0\1\120\10\0\1\141\37\0\2\60"+
    "\2\0\1\60\2\0\1\60\1\142\1\0\1\131\1\60"+
    "\1\61\1\0\1\62\2\0\1\63\2\0\1\64\1\0"+
    "\1\67\3\0\1\60\4\0\1\60\3\0\2\60\1\143"+
    "\1\60\1\0\1\144\2\0\1\60\1\0\1\67\3\60"+
    "\3\0\1\60\3\0\1\145\2\0\2\60\3\0\1\60"+
    "\1\67\41\0\1\146\12\0\1\120\1\0\1\147\106\0"+
    "\1\150\104\0\1\151\5\0\1\152\1\0\1\153\37\0"+
    "\1\154\12\0\1\123\2\0\1\67\2\0\1\67\24\0"+
    "\1\155\25\0\1\67\7\0\2\60\2\0\1\60\2\0"+
    "\2\60\2\0\1\60\1\61\1\0\1\62\2\0\1\63"+
    "\2\0\1\64\4\0\1\151\1\60\4\0\1\60\2\0"+
    "\1\117\2\60\1\0\1\60\4\0\1\60\1\156\1\0"+
    "\3\60\3\0\1\60\6\0\2\60\3\0\1\60\62\0"+
    "\1\150\62\0\1\157\3\0\1\147\4\0\1\160\6\0"+
    "\1\161\6\0\1\67\1\0\1\67\1\0\1\162\5\0"+
    "\1\67\20\0\2\60\2\0\1\60\2\0\2\60\2\0"+
    "\1\60\1\61\1\0\1\62\2\0\1\63\2\0\1\64"+
    "\1\163\3\0\1\164\1\60\4\0\1\60\3\0\1\60"+
    "\1\165\1\0\1\60\3\0\1\156\1\60\2\0\1\72"+
    "\1\60\1\72\3\0\1\166\4\0\1\67\1\0\2\60"+
    "\3\0\1\60\7\0\2\60\2\0\1\60\2\0\2\60"+
    "\2\0\1\60\1\61\1\0\1\62\2\0\1\63\2\0"+
    "\1\64\5\0\1\60\4\0\1\167\3\0\2\60\1\0"+
    "\1\60\1\170\1\171\2\0\1\60\2\0\3\60\3\0"+
    "\1\60\6\0\2\60\3\0\1\60\7\0\2\60\2\0"+
    "\1\60\2\0\2\60\2\0\1\60\1\61\1\0\1\62"+
    "\2\0\1\63\2\0\1\64\5\0\1\60\4\0\1\60"+
    "\3\0\1\60\1\172\1\0\1\60\4\0\1\173\1\174"+
    "\1\0\3\60\3\0\1\60\6\0\2\60\3\0\1\60"+
    "\42\0\1\175\54\0\2\60\2\0\1\60\2\0\2\60"+
    "\2\0\1\60\1\61\1\0\1\62\2\0\1\63\2\0"+
    "\1\64\5\0\1\60\4\0\1\60\2\0\1\176\2\60"+
    "\1\0\1\60\4\0\1\60\2\0\3\60\3\0\1\60"+
    "\6\0\2\60\3\0\1\60\16\0\1\177\24\0\1\200"+
    "\10\0\1\201\1\0\1\202\47\0\1\203\22\0\1\204"+
    "\1\205\14\0\1\206\43\0\1\207\12\0\1\210\31\0"+
    "\1\211\1\0\1\212\35\0\1\150\7\0\1\213\5\0"+
    "\1\214\2\0\1\215\6\0\1\216\10\0\1\150\6\0"+
    "\1\217\1\220\1\0\1\150\1\0\1\221\1\0\1\150"+
    "\5\0\1\213\31\0\1\222\21\0\1\223\1\150\1\224"+
    "\4\0\1\150\3\0\1\225\1\226\1\0\1\150\4\0"+
    "\1\221\1\0\1\150\3\0\1\222\4\0\1\227\17\0"+
    "\2\60\2\0\1\60\2\0\2\60\2\0\1\60\1\61"+
    "\1\0\1\62\2\0\1\63\1\230\1\0\1\64\4\0"+
    "\1\231\1\60\4\0\1\60\3\0\2\60\1\0\1\60"+
    "\4\0\1\60\1\156\1\0\3\60\3\0\1\60\6\0"+
    "\2\60\3\0\1\60\55\0\1\232\1\0\1\147\17\0"+
    "\1\233\13\0\107\57\4\0\1\234\23\0\1\235\1\234"+
    "\13\0\1\234\66\0\1\236\106\0\1\237\70\0\1\240"+
    "\24\0\1\240\13\0\1\240\100\0\1\150\130\0\1\150"+
    "\3\0\1\150\5\0\1\241\117\0\1\221\13\0\2\60"+
    "\2\0\1\60\2\0\2\60\2\0\1\60\1\61\1\0"+
    "\1\62\2\0\1\63\2\0\1\64\5\0\1\242\4\0"+
    "\1\60\3\0\2\60\1\0\1\60\4\0\1\60\1\0"+
    "\1\150\3\60\1\243\2\0\1\60\6\0\2\60\3\0"+
    "\1\60\55\0\1\150\136\0\1\221\73\0\1\244\112\0"+
    "\1\245\72\0\1\246\113\0\1\247\33\0\1\250\24\0"+
    "\1\250\13\0\1\250\135\0\1\150\101\0\1\150\3\0"+
    "\1\150\20\0\2\110\2\0\1\110\1\0\2\110\1\0"+
    "\10\110\1\0\1\110\1\0\1\251\1\110\2\0\10\110"+
    "\1\252\2\110\1\0\42\110\63\0\1\221\103\0\1\150"+
    "\3\0\1\150\56\0\1\253\66\0\1\254\47\0\1\255"+
    "\30\0\2\115\2\0\1\115\1\0\2\115\1\0\10\115"+
    "\1\0\1\115\2\0\1\115\2\0\10\115\1\256\2\115"+
    "\1\0\42\115\4\0\1\116\24\0\1\116\1\257\12\0"+
    "\1\116\133\0\1\150\113\0\1\150\16\0\1\260\24\0"+
    "\1\260\13\0\1\260\62\0\1\150\100\0\1\150\107\0"+
    "\1\221\24\0\1\150\37\0\1\150\47\0\1\150\26\0"+
    "\1\261\33\0\1\262\103\0\2\60\2\0\1\60\2\0"+
    "\1\263\1\60\2\0\1\60\1\61\1\0\1\62\2\0"+
    "\1\63\2\0\1\64\5\0\1\60\4\0\1\60\3\0"+
    "\2\60\1\0\1\242\4\0\1\60\2\0\3\60\3\0"+
    "\1\60\6\0\2\60\3\0\1\60\7\0\2\60\2\0"+
    "\1\60\2\0\1\242\1\60\2\0\1\60\1\61\1\0"+
    "\1\62\2\0\1\63\2\0\1\64\5\0\1\242\4\0"+
    "\1\60\3\0\2\60\1\150\1\60\4\0\1\60\1\0"+
    "\1\150\3\60\3\0\1\60\6\0\2\60\3\0\1\60"+
    "\16\0\1\150\107\0\1\264\137\0\1\265\133\0\1\150"+
    "\103\0\1\150\1\0\1\150\32\0\1\266\147\0\1\267"+
    "\111\0\1\270\136\0\1\271\12\0\2\60\2\0\1\60"+
    "\2\0\2\60\1\0\1\150\1\60\1\61\1\0\1\62"+
    "\2\0\1\63\2\0\1\64\5\0\1\60\4\0\1\60"+
    "\3\0\2\60\1\0\1\60\4\0\1\60\2\0\3\60"+
    "\3\0\1\60\6\0\2\60\3\0\1\60\55\0\1\150"+
    "\10\0\1\272\37\0\1\273\107\0\1\221\36\0\1\150"+
    "\20\0\1\150\101\0\1\150\50\0\1\150\116\0\1\274"+
    "\152\0\1\275\17\0\1\221\24\0\1\150\62\0\1\150"+
    "\44\0\2\150\3\0\1\150\121\0\1\221\27\0\1\150"+
    "\131\0\1\276\64\0\1\221\22\0\1\277\13\0\1\150"+
    "\1\0\1\300\16\0\1\150\42\0\1\221\137\0\1\301"+
    "\35\0\2\60\2\0\1\60\2\0\2\60\1\150\1\0"+
    "\1\60\1\61\1\0\1\62\2\0\1\63\2\0\1\64"+
    "\5\0\1\60\4\0\1\60\3\0\2\60\1\0\1\60"+
    "\4\0\1\60\2\0\3\60\3\0\1\60\6\0\2\60"+
    "\3\0\1\60\7\0\2\60\2\0\1\263\2\0\2\60"+
    "\2\0\1\60\1\61\1\0\1\62\2\0\1\63\2\0"+
    "\1\64\4\0\1\150\1\60\4\0\1\60\3\0\2\60"+
    "\1\0\1\60\3\0\1\302\1\60\1\254\1\0\3\60"+
    "\3\0\1\60\4\0\1\150\1\0\2\60\3\0\1\60"+
    "\7\0\2\60\2\0\1\60\2\0\2\60\2\0\1\60"+
    "\1\61\1\0\1\62\2\0\1\63\2\0\1\64\5\0"+
    "\1\60\4\0\1\60\3\0\2\60\1\0\1\60\4\0"+
    "\1\60\1\0\1\303\3\60\3\0\1\60\6\0\2\60"+
    "\3\0\1\60\57\0\1\304\116\0\1\305\30\0\2\60"+
    "\2\0\1\60\2\0\2\60\2\0\1\60\1\61\1\0"+
    "\1\62\2\0\1\63\2\0\1\64\5\0\1\60\4\0"+
    "\1\60\3\0\2\60\1\0\1\60\4\0\1\60\2\0"+
    "\1\306\2\60\3\0\1\60\6\0\2\60\3\0\1\60"+
    "\7\0\2\60\2\0\1\60\2\0\2\60\2\0\1\60"+
    "\1\61\1\0\1\62\2\0\1\63\2\0\1\64\5\0"+
    "\1\60\4\0\1\60\3\0\2\60\1\0\1\60\4\0"+
    "\1\60\1\307\1\0\3\60\3\0\1\60\6\0\2\60"+
    "\3\0\1\60\67\0\1\310\104\0\1\146\110\0\1\117"+
    "\120\0\1\311\66\0\1\312\12\0\1\313\65\0\1\157"+
    "\103\0\1\314\131\0\1\221\60\0\1\315\113\0\1\150"+
    "\22\0\1\150\41\0\1\300\40\0\1\316\130\0\1\317"+
    "\47\0\1\320\32\0\1\321\67\0\1\163\105\0\1\322"+
    "\107\0\1\150\46\0\1\150\7\0\1\213\10\0\1\213"+
    "\6\0\1\150\10\0\1\150\7\0\1\213\1\0\1\150"+
    "\1\0\1\221\1\0\1\150\5\0\1\150\121\0\1\323"+
    "\67\0\1\150\71\0\1\221\100\0\1\150\107\0\1\221"+
    "\64\0\1\222\21\0\1\222\1\150\5\0\1\150\4\0"+
    "\1\150\1\0\1\150\4\0\1\221\1\0\1\150\3\0"+
    "\1\150\4\0\1\222\76\0\1\150\131\0\1\324\60\0"+
    "\1\325\62\0\1\326\110\0\1\327\113\0\1\330\54\0"+
    "\1\234\15\0\1\331\6\0\1\234\13\0\1\234\44\0"+
    "\1\332\3\0\1\332\1\0\2\332\2\0\5\332\3\0"+
    "\1\332\2\0\1\332\2\0\2\332\2\0\4\332\1\0"+
    "\2\332\1\0\41\332\26\0\1\333\111\0\1\334\64\0"+
    "\1\240\24\0\1\240\1\335\1\336\11\0\1\240\121\0"+
    "\1\337\67\0\1\340\110\0\1\341\116\0\1\342\54\0"+
    "\1\343\104\0\1\344\102\0\1\250\15\0\1\345\6\0"+
    "\1\250\13\0\1\250\64\0\1\346\67\0\2\110\2\0"+
    "\1\110\1\0\2\110\1\0\10\110\1\0\1\110\1\0"+
    "\1\347\1\110\2\0\10\110\1\252\2\110\1\0\42\110"+
    "\10\0\1\150\162\0\1\350\111\0\1\351\24\0\2\115"+
    "\2\0\1\115\1\0\2\115\1\0\10\115\1\0\1\115"+
    "\2\0\1\115\1\352\1\0\10\115\1\256\2\115\1\0"+
    "\42\115\4\0\1\260\24\0\1\260\1\257\12\0\1\260"+
    "\111\0\1\353\112\0\1\354\7\0\1\355\1\0\1\354"+
    "\44\0\1\356\144\0\1\354\4\0\1\355\1\0\1\354"+
    "\43\0\1\357\142\0\1\360\115\0\1\361\107\0\1\362"+
    "\65\0\1\363\127\0\1\364\112\0\1\365\106\0\1\366"+
    "\100\0\1\367\117\0\1\122\62\0\1\370\104\0\1\371"+
    "\127\0\1\354\36\0\1\150\34\0\1\150\55\0\2\60"+
    "\2\0\1\60\2\0\2\60\2\0\1\60\1\61\1\0"+
    "\1\62\2\0\1\63\2\0\1\64\1\372\4\0\1\60"+
    "\4\0\1\60\3\0\2\60\1\0\1\60\4\0\1\60"+
    "\2\0\3\60\3\0\1\60\6\0\2\60\3\0\1\60"+
    "\40\0\1\354\61\0\1\150\46\0\1\150\125\0\1\373"+
    "\67\0\1\150\120\0\1\221\23\0\1\150\171\0\1\374"+
    "\52\0\1\375\141\0\1\150\117\0\1\221\24\0\1\221"+
    "\147\0\1\221\132\0\1\376\111\0\1\221\104\0\1\221"+
    "\105\0\1\160\43\0\1\331\67\0\1\332\3\0\1\332"+
    "\1\0\2\332\2\0\5\332\3\0\1\332\2\0\1\332"+
    "\1\377\1\0\2\332\2\0\4\332\1\0\2\332\1\0"+
    "\41\332\24\0\1\62\111\0\1\u0100\114\0\1\335\110\0"+
    "\1\336\111\0\1\u0101\107\0\1\u0102\107\0\1\u0103\107\0"+
    "\1\u0104\107\0\1\u0105\107\0\1\u0106\107\0\1\u0107\70\0"+
    "\1\150\1\0\1\150\113\0\1\u0108\22\0\1\150\75\0"+
    "\1\u0109\103\0\1\u010a\107\0\1\u010b\133\0\1\354\47\0"+
    "\1\150\1\0\1\221\105\0\1\150\1\0\1\150\125\0"+
    "\1\u010c\133\0\1\354\44\0\1\150\1\0\1\221\106\0"+
    "\1\150\157\0\1\u010d\112\0\1\u010e\61\0\1\u010f\103\0"+
    "\1\150\1\u0110\117\0\1\u0111\54\0\1\150\113\0\1\u0112"+
    "\113\0\1\u0112\144\0\1\u0113\106\0\1\u0114\111\0\1\u0115"+
    "\110\0\1\u0116\106\0\1\u0117\110\0\1\u0118\31\0\1\u0119"+
    "\106\0\1\150\40\0\1\221\123\0\1\u011a\60\0\1\u011b"+
    "\107\0\1\u011c\135\0\1\u011d\62\0\1\u011e\107\0\1\u011f"+
    "\66\0\1\u0120\133\0\1\221\5\0\1\150\52\0\1\u0121"+
    "\145\0\1\u0122\100\0\1\u0123\135\0\1\u0124\112\0\1\u0125"+
    "\104\0\1\u0126\112\0\1\u0127\53\0\1\u0128\121\0\1\u0129"+
    "\105\0\1\u012a\107\0\1\u012b\102\0\1\u012c\131\0\1\u012d"+
    "\110\0\1\u012e\64\0\1\354\116\0\1\354\133\0\1\u012f"+
    "\104\0\1\u0130\73\0\1\u0131\113\0\1\u0131\103\0\1\u0132"+
    "\113\0\1\u0132\50\0\1\u0133\161\0\1\u0134\53\0\1\u0135"+
    "\57\0\1\u012a\170\0\1\u0136\57\0\1\u0137\116\0\1\u0138"+
    "\116\0\1\u0139\103\0\1\u013a\65\0\1\u013b\135\0\1\u013c"+
    "\65\0\1\u013d\125\0\1\u013e\125\0\1\u013f\112\0\1\u0140"+
    "\63\0\1\u0141\100\0\1\u0142\72\0\1\u0143\133\0\1\u0144"+
    "\106\0\1\u0145\101\0\1\u0146\121\0\1\u0147\113\0\1\u0148"+
    "\55\0\1\u0149\124\0\1\u014a\104\0\1\u014b\75\0\1\u014c"+
    "\105\0\1\354\126\0\1\u014d\106\0\1\u014e\116\0\1\u014f"+
    "\131\0\1\u0150\104\0\1\u0150\60\0\1\u0151\141\0\1\u0152"+
    "\104\0\1\u0152\62\0\1\u0153\72\0\1\u0154\77\0\1\u0155"+
    "\161\0\1\u0156\112\0\1\u0156\56\0\1\u0157\110\0\1\u0158"+
    "\105\0\1\u0159\75\0\1\u015a\112\0\1\u015b\60\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\55\1\5\0\1\11\1\1\1\11\2\0"+
    "\3\1\1\11\2\0\1\1\15\0\1\1\5\0\1\1"+
    "\20\0\1\1\2\0\1\11\42\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\11\2\1\2\0\2\1\12\0\1\1"+
    "\14\0\1\11\1\0\1\1\1\0\1\1\5\0\2\1"+
    "\2\0\1\1\7\0\1\1\2\0\1\1\1\0\2\1"+
    "\4\0\2\1\7\0\1\1\1\0\1\1\1\0\2\1"+
    "\6\0\1\11\1\0\1\1\1\0\1\1\1\11\1\0"+
    "\2\11\13\0\2\1\1\0\1\1\25\0\1\11\36\0"+
    "\2\11\35\0\1\11\1\0\1\11\3\0\1\11\4\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 16: 
          { lexeme=yytext(); return Pseudoinstruccion_Dup_Caracter;
          }
        case 23: break;
        case 19: 
          { lexeme=yytext(); return Pseudoinstruccion_D_S;
          }
        case 24: break;
        case 9: 
          { lexeme=yytext(); return Constante_Numerica_H;
          }
        case 25: break;
        case 11: 
          { lexeme=yytext(); return Pseudoinstruccion_Dup_D;
          }
        case 26: break;
        case 4: 
          { lexeme=yytext(); return Pseudoinstruccion_D_B;
          }
        case 27: break;
        case 21: 
          { lexeme=yytext(); return Pseudoinstruccion_S_S;
          }
        case 28: break;
        case 5: 
          { lexeme=yytext(); return Pseudoinstruccion_D_W;
          }
        case 29: break;
        case 10: 
          { lexeme=yytext(); return Pseudoinstruccion_Dup_0;
          }
        case 30: break;
        case 7: 
          { lexeme=yytext(); return Simbolo;
          }
        case 31: break;
        case 12: 
          { lexeme=yytext(); return Pseudoinstruccion_Dup_H;
          }
        case 32: break;
        case 6: 
          { lexeme=yytext(); return Registro;
          }
        case 33: break;
        case 13: 
          { lexeme=yytext(); return Constante_Caracter_CD;
          }
        case 34: break;
        case 17: 
          { lexeme=yytext(); return Pseudoinstruccion_B;
          }
        case 35: break;
        case 15: 
          { lexeme=yytext(); return Pseudoinstruccion_E;
          }
        case 36: break;
        case 14: 
          { lexeme=yytext(); return Pseudoinstruccion;
          }
        case 37: break;
        case 2: 
          { lexeme=yytext(); return Constante_Numerica_D;
          }
        case 38: break;
        case 1: 
          { return ERROR;
          }
        case 39: break;
        case 22: 
          { lexeme=yytext(); return Constante_Caracter_CS;
          }
        case 40: break;
        case 3: 
          { /*Ignore*/
          }
        case 41: break;
        case 18: 
          { lexeme=yytext(); return Pseudoinstruccion_W;
          }
        case 42: break;
        case 20: 
          { lexeme=yytext(); return Pseudoinstruccion_C_S;
          }
        case 43: break;
        case 8: 
          { lexeme=yytext(); return Instruccion;
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
